{
    "pipes": [],
    "interfaces": [
        {
            "name": "Account",
            "id": "interface-Account-1a042bb6e71885b25eb09e875f368d3ea18b8501f0e4249f11713331814c6947a78e4e55cf65b9d5e4ceba0f4ab60339f81cf5179ebde6a166fb0d6487d28a68",
            "file": "src/app/accounts/account.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Account {\n    id: string;\n    title: string;\n    content: string;\n    name: string;\n    description: string;\n    interest: number;\n    limit: number;\n    dueDate: Date;\n    institution: string;\n    balance: number;\n    imagePath: string;\n}\n",
            "properties": [
                {
                    "name": "balance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "institution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "interest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Account",
            "id": "interface-Account-1a042bb6e71885b25eb09e875f368d3ea18b8501f0e4249f11713331814c6947a78e4e55cf65b9d5e4ceba0f4ab60339f81cf5179ebde6a166fb0d6487d28a68-1",
            "file": "src/app/institution/account.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Account {\n    id: string;\n    title: string;\n    content: string;\n    name: string;\n    description: string;\n    interest: number;\n    limit: number;\n    dueDate: Date;\n    institution: string;\n    balance: number;\n    imagePath: string;\n}\n",
            "properties": [
                {
                    "name": "balance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "institution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "interest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Account-1"
        },
        {
            "name": "Bill",
            "id": "interface-Bill-e03f68c571e7affa2f28e9882c6fd181032057144e47e838933e7542f38f86c49ecd8d8918eac7278e15abf1138a871089d8c63be8640fb0b0f36054c951afdb",
            "file": "src/app/bills/bill.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Bill {\n  id: string;\n  title: string;\n  amount: number;\n  description: string;\n  institution: string;\n  category: string;\n  frequency: string;\n  dueDate: Date;\n  paymentMethod: string;\n  imagePath: string;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "frequency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "institution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "paymentMethod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BillInterface",
            "id": "interface-BillInterface-6313df29e1a700bb1c7074d0f49a411951f05dbd11759f882d11fb2234d2e4463e5dcc2b0d5c0c8f0da5a064a2a0cbf91c332f3e0dbf92ade435f010cdf4ce33",
            "file": "nestbackend/src/bills/entities/bill.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Document } from 'mongoose';\n\nexport interface BillInterface extends Document {\n  title: string;\n  amount: number;\n  description: string;\n  institution: string;\n  category: string;\n  frequency: string;\n  dueDate: Date;\n  paymentMethod: string;\n  imagePath: string;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "frequency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "institution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "paymentMethod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Document"
        },
        {
            "name": "BudgetInterface",
            "id": "interface-BudgetInterface-3a1832557af8774e8687dfa96e73fdb8b95b321dd6bdd1b2f89d7405d02de5b881ce33b099b0e2fca60c5467d22b85ac0a6eaafa74d501566874f70e539e7011",
            "file": "nestbackend/src/budgets/entities/budget.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Document } from 'mongoose';\n\nexport interface BudgetInterface extends Document {\n  budgetItem: string;\n  budgetCategory: string;\n  percentage: number;\n  percentageCategory: number;\n  exemptFromRecalculation: boolean;\n  fixedPriceValue: number;\n  contribution: number;\n}\n",
            "properties": [
                {
                    "name": "budgetCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "budgetItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "contribution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "exemptFromRecalculation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "fixedPriceValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "percentageCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Document"
        },
        {
            "name": "Card",
            "id": "interface-Card-180b1f52225c30c8599640cee85c71dcd74f2f1e37a03293b670a7157162439b2f254f8076a74bbe664cc13f74164d367533edfc48a527cf486927d48de353ee",
            "file": "src/app/card/card.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Card {\n    id: string;\n    title: string;\n    content: string;\n    name: string;\n    description: string;\n    interest: number;\n    limit: number;\n    dueDate: Date;\n    institution: string;\n    balance: number;\n    imagePath: string;\n}\n",
            "properties": [
                {
                    "name": "balance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "institution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "interest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Post",
            "id": "interface-Post-c7c496a682b775df91c450a161fb8b7b23abef9a7b728fd398c5b1ffe0777b1e027bcc5eda8bf3925c34ce0758b37b85c434c03d8fd1cf698c2581773904f37d",
            "file": "src/app/posts/post.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Post {\n  id: string;\n  title: string;\n  content: string;\n  imagePath: string;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AccountsService",
            "id": "injectable-AccountsService-ae849766ade8382a65171d004cd16ed274154f92228a8aed834710decb5c3770831970d7e2e8688c710cf59479de10392fe38498bd1466e49941c2eaad1dfbc2",
            "file": "nestbackend/src/accounts/accounts.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createAccountDto",
                            "type": "CreateAccountDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createAccountDto",
                            "type": "CreateAccountDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateAccountDto",
                            "type": "UpdateAccountDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateAccountDto",
                            "type": "UpdateAccountDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CreateAccountDto } from './dto/create-account.dto';\nimport { UpdateAccountDto } from './dto/update-account.dto';\n\n@Injectable()\nexport class AccountsService {\n  create(createAccountDto: CreateAccountDto) {\n    return 'This action adds a new account';\n  }\n\n  findAll() {\n    return `This action returns all accounts`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} account`;\n  }\n\n  update(id: number, updateAccountDto: UpdateAccountDto) {\n    return `This action updates a #${id} account`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} account`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "AccountsService",
            "id": "injectable-AccountsService-d004554ad063dcfc95e7467ba0f65b37c9c4de6ca3e628ac4e6ba683913d7357746979b7a032cdf9174de1b7940b26db565a8a90acc6ce4025a4c84cf41135b7-1",
            "file": "src/app/accounts/account.service.ts",
            "properties": [
                {
                    "name": "accounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "accountsUpdated",
                    "defaultValue": "new Subject<Account[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addAccount",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "image",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAccount",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccount",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccounts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAccountUpdateListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateAccount",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "image",
                            "type": "File | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "File | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Account } from \"./account.model\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n@Injectable({ providedIn: \"root\" })\nexport class AccountsService {\n  private accounts: Account[] = [];\n  private accountsUpdated = new Subject<Account[]>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getAccounts() {\n    this.http\n      .get<{ message: string; accounts: any }>(\n        \"http://localhost:3000/api/accounts\"\n      )\n      .pipe(\n        map((accountData) => {\n          return accountData.accounts.map((account) => {\n            return {\n              title: account.title,\n              content: account.content,\n              id: account._id,\n              name: account.name,\n              description: account.description,\n              interest: account.interest,\n              limit: account.limit,\n              dueDate: account.dueDate,\n              institution: account.institution,\n              balance: account.balance,\n              imagePath: account.imagePath,\n            };\n          });\n        })\n      )\n      .subscribe((transformedAccounts) => {\n        this.accounts = transformedAccounts;\n        this.accountsUpdated.next([...this.accounts]);\n      });\n  }\n\n  getAccountUpdateListener() {\n    return this.accountsUpdated.asObservable();\n  }\n\n  getAccount(id: string) {\n    return this.http.get<{\n      _id: string;\n      title: string;\n      content: string;\n      name: string;\n      description: string;\n      interest: number;\n      limit: number;\n      dueDate: Date;\n      institution: string;\n      balance: number;\n      imagePath: string;\n    }>(\"http://localhost:3000/api/accounts/\" + id);\n  }\n\n  addAccount(\n    title: string,\n    content: string,\n    name: string,\n    description: string,\n    interest,\n    limit,\n    dueDate,\n    institution: string,\n    balance,\n    image: File\n  ) {\n    const accountData = new FormData();\n    accountData.append(\"title\", title);\n    accountData.append(\"content\", content);\n    accountData.append(\"name\", name);\n    accountData.append(\"description\", description);\n    accountData.append(\"interest\", interest);\n    accountData.append(\"limit\", limit);\n    accountData.append(\"dueDate\", dueDate);\n    accountData.append(\"institution\", institution);\n    accountData.append(\"balance\", balance);\n    accountData.append(\"image\", image, title);\n    this.http\n      .post<{ message: string; account: Account }>(\n        \"http://localhost:3000/api/accounts\",\n        accountData\n      )\n      .subscribe((responseData) => {\n        const account: Account = {\n          id: responseData.account.id,\n          title: title,\n          content: content,\n          name: name,\n          description: description,\n          interest: interest,\n          limit: limit,\n          dueDate: dueDate,\n          institution: institution,\n          balance: balance,\n          imagePath: responseData.account.imagePath,\n        };\n        this.accounts.push(account);\n        this.accountsUpdated.next([...this.accounts]);\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  updateAccount(\n    id: string,\n    title: string,\n    content: string,\n    name: string,\n    description: string,\n    interest,\n    limit,\n    dueDate,\n    institution: string,\n    balance,\n    image: File | string\n  ) {\n    let accountData: Account | FormData;\n\n    if (typeof image === \"object\") {\n      accountData = new FormData();\n      accountData.append(\"id\", id);\n      accountData.append(\"title\", title);\n      accountData.append(\"content\", content);\n      accountData.append(\"name\", name);\n      accountData.append(\"description\", description);\n      accountData.append(\"interest\", interest);\n      accountData.append(\"limit\", limit);\n      accountData.append(\"dueDate\", dueDate);\n      accountData.append(\"institution\", institution);\n      accountData.append(\"balance\", balance);\n      accountData.append(\"image\", image, title);\n    } else {\n      accountData = {\n        id: id,\n        title: title,\n        content: content,\n        name: name,\n        description: description,\n        interest: interest,\n        limit: limit,\n        dueDate: dueDate,\n        institution: institution,\n        balance: balance,\n        imagePath: image,\n      };\n    }\n    this.http\n      .put(\"http://localhost:3000/api/accounts/\" + id, accountData)\n      .subscribe((response) => {\n        const updatedAccounts = [...this.accounts];\n        const oldAccountIndex = updatedAccounts.findIndex((p) => p.id === id);\n        const account: Account = {\n          id: id,\n          title: title,\n          content: content,\n          name: name,\n          description: description,\n          interest: interest,\n          limit: limit,\n          dueDate: dueDate,\n          institution: institution,\n          balance: balance,\n          imagePath: \"\",\n        };\n        updatedAccounts[oldAccountIndex] = account;\n        this.accounts = updatedAccounts;\n        this.accountsUpdated.next([...this.accounts]);\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  deleteAccount(accountId: string) {\n    this.http\n      .delete(\"http://localhost:3000/api/accounts/\" + accountId)\n      .subscribe(() => {\n        const updatedAccounts = this.accounts.filter(\n          (account) => account.id !== accountId\n        );\n        this.accounts = updatedAccounts;\n        this.accountsUpdated.next([...this.accounts]);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AccountsService-1"
        },
        {
            "name": "AccountsService",
            "id": "injectable-AccountsService-3f2e81299f37f273415710152cb482136614bc0135254c707e6644756c2bc9e68f15056c1a1082d320c34946482de1e6cde35d11a0fcc306c8e844257a732cb0-2",
            "file": "src/app/institution/account.service.ts",
            "properties": [
                {
                    "name": "accounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "accountsUpdated",
                    "defaultValue": "new Subject<Account[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addAccount",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "image",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAccount",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccount",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccounts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAccountUpdateListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateAccount",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "image",
                            "type": "File | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "File | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport { Account } from './account.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountsService {\n  private accounts: Account[] = [];\n  private accountsUpdated = new Subject<Account[]>();\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  getAccounts() {\n    this.http\n      .get<{ message: string; accounts: any }>('http://localhost:3000/api/accounts')\n      .pipe(\n        map(accountData => {\n          return accountData.accounts.map(account => {\n            return {\n              title: account.title,\n              content: account.content,\n              id: account._id,\n              name: account.name,\n              description: account.description,\n              interest: account.interest,\n              limit: account.limit,\n              dueDate: account.dueDate,\n              institution: account.institution,\n              balance: account.balance,\n              imagePath: account.imagePath\n            };\n          });\n        })\n      )\n      .subscribe(transformedAccounts => {\n        this.accounts = transformedAccounts;\n        this.accountsUpdated.next([...this.accounts]);\n      });\n  }\n\n  getAccountUpdateListener() {\n    return this.accountsUpdated.asObservable();\n  }\n\n  getAccount(id: string) {\n    return this.http.get<{\n      _id: string,\n      title: string,\n      content: string,\n      name: string,\n      description: string,\n      interest: number,\n      limit: number,\n      dueDate: Date,\n      institution: string,\n      balance: number,\n      imagePath: string\n    }>(\n      'http://localhost:3000/api/accounts/' + id\n    );\n  }\n\n  addAccount(\n    title: string,\n    content: string,\n    name: string,\n    description: string,\n    interest,\n    limit,\n    dueDate,\n    institution: string,\n    balance,\n    image: File\n  ) {\n    const accountData = new FormData();\n    accountData.append('title', title);\n    accountData.append('content', content);\n    accountData.append('name', name);\n    accountData.append('description', description);\n    accountData.append('interest', interest);\n    accountData.append('limit', limit);\n    accountData.append('dueDate', dueDate);\n    accountData.append('institution', institution);\n    accountData.append('balance', balance);\n    accountData.append('image', image, title);\n    this.http\n      .post<{ message: string; account: Account }>(\n        'http://localhost:3000/api/accounts',\n        accountData\n      )\n      .subscribe(responseData => {\n        const account: Account = {\n          id: responseData.account.id,\n          title: title,\n          content: content,\n          name: name,\n          description: description,\n          interest: interest,\n          limit: limit,\n          dueDate: dueDate,\n          institution: institution,\n          balance: balance,\n          imagePath: responseData.account.imagePath\n        };\n        this.accounts.push(account);\n        this.accountsUpdated.next([...this.accounts]);\n        this.router.navigate(['/']);\n      });\n  }\n\n  updateAccount(\n    id: string,\n    title: string,\n    content: string,\n    name: string,\n    description: string,\n    interest,\n    limit,\n    dueDate,\n    institution: string,\n    balance,\n    image: File | string\n  ) {\n    let accountData: Account | FormData;\n\n    if (typeof image === 'object') {\n      accountData = new FormData();\n      accountData.append('id', id);\n      accountData.append('title', title);\n      accountData.append('content', content);\n      accountData.append('name', name);\n      accountData.append('description', description);\n      accountData.append('interest', interest);\n      accountData.append('limit', limit);\n      accountData.append('dueDate', dueDate);\n      accountData.append('institution', institution);\n      accountData.append('balance', balance);\n      accountData.append('image', image, title);\n    } else {\n      accountData = {\n        id: id,\n        title: title,\n        content: content,\n        name: name,\n        description: description,\n        interest: interest,\n        limit: limit,\n        dueDate: dueDate,\n        institution: institution,\n        balance: balance,\n        imagePath: image\n      };\n    }\n    this.http\n      .put('http://localhost:3000/api/accounts/' + id, accountData)\n      .subscribe(response => {\n        const updatedAccounts = [...this.accounts];\n        const oldAccountIndex = updatedAccounts.findIndex(p => p.id === id);\n        const account: Account = {\n          id: id,\n          title: title,\n          content: content,\n          name: name,\n          description: description,\n          interest: interest,\n          limit: limit,\n          dueDate: dueDate,\n          institution: institution,\n          balance: balance,\n          imagePath: ''\n        };\n        updatedAccounts[oldAccountIndex] = account;\n        this.accounts = updatedAccounts;\n        this.accountsUpdated.next([...this.accounts]);\n        this.router.navigate(['/']);\n      });\n  }\n\n  deleteAccount(accountId: string) {\n    this.http\n      .delete('http://localhost:3000/api/accounts/' + accountId)\n      .subscribe(() => {\n        const updatedAccounts = this.accounts.filter(account => account.id !== accountId);\n        this.accounts = updatedAccounts;\n        this.accountsUpdated.next([...this.accounts]);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "AccountsService-2"
        },
        {
            "name": "AppService",
            "id": "injectable-AppService-5845051c18b0c1cf39a41cd649012dc7cadff3eedc14a1138a2a5bcf1eb5977dfe24093830dd4ec1123581c5e9c5ae8aee036354691338b178e9b33443138ad6",
            "file": "nestbackend/src/app.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getHello",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getJson",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return \"Hello World!\";\n  }\n\n  getJson(): { name: string } {\n    return { name: \"Max\" };\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "AssetsService",
            "id": "injectable-AssetsService-48104738ce994904ee57e07c65bb0c2ea9928cc4f19950b9af60f03f35f62922c564db70a530568e9c220942c3ced75c58389c1503d9a99128a5ad35658d49b9",
            "file": "nestbackend/src/assets/assets.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createAssetDto",
                            "type": "CreateAssetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createAssetDto",
                            "type": "CreateAssetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateAssetDto",
                            "type": "UpdateAssetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateAssetDto",
                            "type": "UpdateAssetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CreateAssetDto } from './dto/create-asset.dto';\nimport { UpdateAssetDto } from './dto/update-asset.dto';\n\n@Injectable()\nexport class AssetsService {\n  create(createAssetDto: CreateAssetDto) {\n    return 'This action adds a new asset';\n  }\n\n  findAll() {\n    return `This action returns all assets`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} asset`;\n  }\n\n  update(id: number, updateAssetDto: UpdateAssetDto) {\n    return `This action updates a #${id} asset`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} asset`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "BillsService",
            "id": "injectable-BillsService-65f08e77f847f2b0f6677e3f672128bd132d177c61729db32986306c69d26759bff4536e0cf47f5743f490b4fdadd22349b6c473a39812c002134d49416c785d",
            "file": "nestbackend/src/bills/bills.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createBillDto",
                            "type": "CreateBillDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "createBillDto",
                            "type": "CreateBillDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "findBill",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<BillInterface>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateBillDto",
                            "type": "UpdateBillDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateBillDto",
                            "type": "UpdateBillDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CreateBillDto } from './dto/create-bill.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { UpdateBillDto } from './dto/update-bill.dto';\nimport { Model } from 'mongoose';\nimport { BillInterface } from './entities/bill.entity';\n\n@Injectable()\nexport class BillsService {\n  constructor(\n    @InjectModel('Bill') private readonly billModel: Model<BillInterface>,\n  ) {}\n  // Create a bill\n  async create(createBillDto: CreateBillDto) {\n    const newBill = new this.billModel({\n      title: createBillDto.title,\n      amount: createBillDto.amount,\n      description: createBillDto.description,\n      institution: createBillDto.institution,\n      category: createBillDto.category,\n      frequency: createBillDto.frequency,\n      dueDate: createBillDto.dueDate,\n      paymentMethod: createBillDto.paymentMethod,\n      imagePath: createBillDto.imagePath,\n    });\n    const result = await newBill.save();\n    return result.id as string;\n  }\n\n  // Return all bills\n  async findAll() {\n    const bills = await this.billModel.find().exec();\n    return bills.map((bill) => ({\n      id: bill.id,\n      title: bill.title,\n      amount: bill.amount,\n      description: bill.description,\n      institution: bill.institution,\n      category: bill.category,\n      frequency: bill.frequency,\n      dueDate: bill.dueDate,\n      paymentMethod: bill.paymentMethod,\n      imagePath: bill.imagePath,\n    }));\n  }\n\n  // Return 1 bill by id\n  async findOne(id: string) {\n    const bill = await this.findBill(id);\n    return {\n      id: bill.id,\n      title: bill.title,\n      amount: bill.amount,\n      description: bill.description,\n      institution: bill.institution,\n      category: bill.category,\n      frequency: bill.frequency,\n      dueDate: bill.dueDate,\n      paymentMethod: bill.paymentMethod,\n      imagePath: bill.imagePath,\n    };\n  }\n\n  // Update bill using id body in updateBillDto format\n  async update(id: string, updateBillDto: UpdateBillDto) {\n    const bill = await this.findBill(id);\n\n    if (updateBillDto.title) {\n      bill.title = updateBillDto.title;\n    }\n    if (updateBillDto.amount) {\n      bill.amount = updateBillDto.amount;\n    }\n    if (updateBillDto.description) {\n      bill.description = updateBillDto.description;\n    }\n    if (updateBillDto.institution) {\n      bill.institution = updateBillDto.institution;\n    }\n    if (updateBillDto.category) {\n      bill.category = updateBillDto.category;\n    }\n    if (updateBillDto.frequency) {\n      bill.frequency = updateBillDto.frequency;\n    }\n    if (updateBillDto.dueDate) {\n      bill.dueDate = updateBillDto.dueDate;\n    }\n    if (updateBillDto.paymentMethod) {\n      bill.paymentMethod = updateBillDto.paymentMethod;\n    }\n    if (updateBillDto.imagePath) {\n      bill.imagePath = updateBillDto.imagePath;\n    }\n    bill.save();\n    return bill;\n  }\n\n  // Remove bill by id from Mongo Collection\n  async remove(id: string) {\n    const result = await this.billModel.deleteOne({ _id: id }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException('Could not find product.');\n    }\n  }\n\n  // Find one bill in Mongo Collection\n  private async findBill(id: string): Promise<BillInterface> {\n    let bill: BillInterface;\n    try {\n      bill = await this.billModel.findById(id);\n    } catch (error) {\n      throw new NotFoundException('Could not find bill.');\n    }\n    if (!bill) {\n      throw new NotFoundException('Could not find bill.');\n    }\n    return bill;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "billModel",
                        "type": "Model<BillInterface>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "billModel",
                        "type": "Model<BillInterface>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BillsService",
            "id": "injectable-BillsService-bd9af8798a29db4ba931692c2862bf2b8a1c0d3eacdbdeca67f8786e354099d0abac9a5c51b5d0b31cf603e3422afc05725f628c88b441c676b63f00e0677f23-1",
            "file": "src/app/bills/bill.service.ts",
            "properties": [
                {
                    "name": "bills",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Bill[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "billsUpdated",
                    "defaultValue": "new Subject<Bill[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addBill",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amount",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "frequency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paymentMethod",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "image",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "frequency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paymentMethod",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBill",
                    "args": [
                        {
                            "name": "billId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "billId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBill",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBills",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBillUpdateListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateBill",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amount",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "frequency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paymentMethod",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "image",
                            "type": "File | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "frequency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paymentMethod",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "File | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Bill } from \"./bill.model\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n@Injectable({ providedIn: \"root\" })\nexport class BillsService {\n  private bills: Bill[] = [];\n  private billsUpdated = new Subject<Bill[]>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getBills() {\n    this.http\n      .get<{ message: string; bills: any }>(\"http://localhost:3000/api/bills\")\n      .pipe(\n        map((billData) => {\n          return billData.bills.map((bill) => {\n            return {\n              id: bill._id,\n              title: bill.title,\n              amount: bill.amount,\n              description: bill.description,\n              institution: bill.institution,\n              category: bill.category,\n              frequency: bill.frequency,\n              dueDate: bill.dueDate,\n              paymentMethod: bill.paymentMethod,\n              imagePath: bill.imagePath,\n            };\n          });\n        })\n      )\n      .subscribe((transformedBills) => {\n        this.bills = transformedBills;\n        this.billsUpdated.next([...this.bills]);\n      });\n  }\n\n  getBillUpdateListener() {\n    return this.billsUpdated.asObservable();\n  }\n\n  getBill(id: string) {\n    return this.http.get<{\n      _id: string;\n      title: string;\n      amount;\n      description: string;\n      institution: string;\n      category: string;\n      frequency: string;\n      dueDate: Date;\n      paymentMethod: string;\n      imagePath: string;\n    }>(\"http://localhost:3000/api/bills/\" + id);\n  }\n\n  addBill(\n    title: string,\n    amount,\n    description: string,\n    institution: string,\n    category: string,\n    frequency: string,\n    dueDate,\n    paymentMethod: string,\n    image: File\n  ) {\n    const billData = new FormData();\n    billData.append(\"title\", title);\n    billData.append(\"amount\", amount);\n    billData.append(\"description\", description);\n    billData.append(\"institution\", institution);\n    billData.append(\"category\", category);\n    billData.append(\"frequency\", frequency);\n    billData.append(\"dueDate\", dueDate);\n    billData.append(\"paymentMethod\", paymentMethod);\n    billData.append(\"image\", image, title);\n    this.http\n      .post<{ message: string; bill: Bill }>(\n        \"http://localhost:3000/api/bills\",\n        billData\n      )\n      .subscribe((responseData) => {\n        const bill: Bill = {\n          id: responseData.bill.id,\n          title: title,\n          amount: amount,\n          description: description,\n          institution: institution,\n          category: category,\n          frequency: frequency,\n          dueDate: dueDate,\n          paymentMethod: paymentMethod,\n          imagePath: responseData.bill.imagePath,\n        };\n        this.bills.push(bill);\n        this.billsUpdated.next([...this.bills]);\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  updateBill(\n    id: string,\n    title: string,\n    amount,\n    description: string,\n    institution: string,\n    category: string,\n    frequency: string,\n    dueDate,\n    paymentMethod: string,\n    image: File | string\n  ) {\n    let billData: Bill | FormData;\n\n    if (typeof image === \"object\") {\n      billData = new FormData();\n      billData.append(\"id\", id);\n      billData.append(\"title\", title);\n      billData.append(\"amount\", amount);\n      billData.append(\"description\", description);\n      billData.append(\"institution\", institution);\n      billData.append(\"category\", category);\n      billData.append(\"frequency\", frequency);\n      billData.append(\"dueDate\", dueDate);\n      billData.append(\"paymentMethod\", paymentMethod);\n      billData.append(\"image\", image, title);\n    } else {\n      billData = {\n        id: id,\n        title: title,\n        amount: amount,\n        description: description,\n        institution: institution,\n        category: category,\n        frequency: frequency,\n        dueDate: dueDate,\n        paymentMethod: paymentMethod,\n        imagePath: image,\n      };\n    }\n    this.http\n      .put(\"http://localhost:3000/api/bills/\" + id, billData)\n      .subscribe((response) => {\n        const updatedBills = [...this.bills];\n        const oldBillIndex = updatedBills.findIndex((p) => p.id === id);\n        const bill: Bill = {\n          id: id,\n          title: title,\n          amount: amount,\n          description: description,\n          institution: institution,\n          category: category,\n          frequency: frequency,\n          dueDate: dueDate,\n          paymentMethod: paymentMethod,\n          imagePath: \"\",\n        };\n        updatedBills[oldBillIndex] = bill;\n        this.bills = updatedBills;\n        this.billsUpdated.next([...this.bills]);\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  deleteBill(billId: string) {\n    this.http\n      .delete(\"http://localhost:3000/api/bills/\" + billId)\n      .subscribe(() => {\n        const updatedBills = this.bills.filter((bill) => bill.id !== billId);\n        this.bills = updatedBills;\n        this.billsUpdated.next([...this.bills]);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BillsService-1"
        },
        {
            "name": "BudgetsService",
            "id": "injectable-BudgetsService-de4d54b58d5d66c687e17178dc6f1e9be01685d71e9f16312f6d5c6a2613727aab73570b78f6b7bbd8ed4771d0d3a2110946dbe30d1eaa20c4f956babea4cd7a",
            "file": "nestbackend/src/budgets/budgets.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createBudgetDto",
                            "type": "CreateBudgetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "createBudgetDto",
                            "type": "CreateBudgetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "findBudget",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<BudgetInterface>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateBudgetDto",
                            "type": "UpdateBudgetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateBudgetDto",
                            "type": "UpdateBudgetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CreateBudgetDto } from \"./dto/create-budget.dto\";\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { UpdateBudgetDto } from \"./dto/update-budget.dto\";\nimport { Model } from \"mongoose\";\nimport { BudgetInterface } from \"./entities/budget.entity\";\n\n@Injectable()\nexport class BudgetsService {\n  constructor(\n    @InjectModel(\"Budget\") private readonly budgetModel: Model<BudgetInterface>,\n  ) {}\n  // Create a budget\n  async create(createBudgetDto: CreateBudgetDto) {\n    const newBudget = new this.budgetModel({\n      budgetItem: createBudgetDto.budgetItem,\n      budgetCategory: createBudgetDto.budgetCategory,\n      percentage: createBudgetDto.percentage,\n      percentageCategory: createBudgetDto.percentageCategory,\n      exemptFromRecalculation: createBudgetDto.exemptFromRecalculation,\n      fixedPriceValue: createBudgetDto.fixedPriceValue,\n      contribution: createBudgetDto.contribution,\n    });\n    const result = await newBudget.save();\n    return result.id as string;\n  }\n\n  // Return all budgets\n  async findAll() {\n    const budgets = await this.budgetModel.find().exec();\n    return budgets.map((budget) => ({\n      _id: budget._id,\n      budgetItem: budget.budgetItem,\n      budgetCategory: budget.budgetCategory,\n      percentage: budget.percentage,\n      percentageCategory: budget.percentageCategory,\n      exemptFromRecalculation: budget.exemptFromRecalculation,\n      fixedPriceValue: budget.fixedPriceValue,\n      contribution: budget.contribution,\n    }));\n  }\n\n  // Return 1 budget by id\n  async findOne(id: string) {\n    const budget = await this.findBudget(id);\n    return {\n      id: budget.id,\n      budgetItem: budget.budgetItem,\n      budgetCategory: budget.budgetCategory,\n      percentage: budget.percentage,\n      percentageCategory: budget.percentageCategory,\n      exemptFromRecalculation: budget.exemptFromRecalculation,\n      fixedPriceValue: budget.fixedPriceValue,\n      contribution: budget.contribution,\n    };\n  }\n\n  // Update budget using id body in updateBudgetDto format\n  async update(id: string, updateBudgetDto: UpdateBudgetDto) {\n    const budget = await this.findBudget(id);\n\n    if (updateBudgetDto.budgetItem) {\n      budget.budgetItem = updateBudgetDto.budgetItem;\n    }\n    if (updateBudgetDto.budgetCategory) {\n      budget.budgetCategory = updateBudgetDto.budgetCategory;\n    }\n    if (updateBudgetDto.percentage) {\n      budget.percentage = updateBudgetDto.percentage;\n    }\n    if (updateBudgetDto.percentageCategory) {\n      budget.percentageCategory = updateBudgetDto.percentageCategory;\n    }\n    if (updateBudgetDto.exemptFromRecalculation) {\n      budget.exemptFromRecalculation = updateBudgetDto.exemptFromRecalculation;\n    }\n    if (updateBudgetDto.fixedPriceValue) {\n      budget.fixedPriceValue = updateBudgetDto.fixedPriceValue;\n    }\n    if (updateBudgetDto.contribution) {\n      budget.contribution = updateBudgetDto.contribution;\n    }\n    budget.save();\n    return budget;\n  }\n\n  // Remove budget by id from Mongo Collection\n  async remove(id: string) {\n    const result = await this.budgetModel.deleteOne({ _id: id }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(\"Could not find product.\");\n    }\n  }\n\n  // Find one budget in Mongo Collection\n  private async findBudget(id: string): Promise<BudgetInterface> {\n    let budget: BudgetInterface;\n    try {\n      budget = await this.budgetModel.findById(id);\n    } catch (error) {\n      throw new NotFoundException(\"Could not find budget.\");\n    }\n    if (!budget) {\n      throw new NotFoundException(\"Could not find budget.\");\n    }\n    return budget;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "budgetModel",
                        "type": "Model<BudgetInterface>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "budgetModel",
                        "type": "Model<BudgetInterface>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BudgetsService",
            "id": "injectable-BudgetsService-0d627f86444e0681c17bcea8bdc83851650936ac90873c926bc46dff0a9e2cd894497b69bc93292ce750ae55edd9f1898e2a8587fb422d72d9016641b200c1d0-1",
            "file": "src/app/budget/budget.service.ts",
            "properties": [
                {
                    "name": "budgets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Budget[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "budgetsUpdated",
                    "defaultValue": "new Subject<Budget[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addBudget",
                    "args": [
                        {
                            "name": "budgetItem",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "budgetCategory",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "percentage",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "percentageCategory",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exemptFromRecalculation",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fixedPriceValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contribution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "budgetItem",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "budgetCategory",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "percentage",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "percentageCategory",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "exemptFromRecalculation",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fixedPriceValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contribution",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteBudget",
                    "args": [
                        {
                            "name": "budgetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "budgetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBudget",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBudgets",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBudgetUpdateListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateBudget",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "budgetItem",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "budgetCategory",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "percentage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "percentageCategory",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exemptFromRecalculation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fixedPriceValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contribution",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "budgetItem",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "budgetCategory",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "percentage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "percentageCategory",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "exemptFromRecalculation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fixedPriceValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contribution",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Budget } from \"./budget.model\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n@Injectable({ providedIn: \"root\" })\nexport class BudgetsService {\n  private budgets: Budget[] = [];\n  private budgetsUpdated = new Subject<Budget[]>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getBudgets() {\n    console.log(\"Getting Budgets\");\n    this.http.get(\"http://localhost:8000/budgets\").subscribe((budgets: any) => {\n      this.budgets = [...budgets];\n      this.budgetsUpdated.next([...this.budgets]);\n    });\n\n    console.log(this.budgets);\n    //   .subscribe((transformedBudgets) => {\n    //     this.budgets = transformedBudgets;\n    //     this.budgetsUpdated.next([...this.budgets]);\n    //   });\n\n    //   console.log(budgets)\n    // );\n\n    // // this.http\n    // //   .get<{ message: string; budgets: any }>(\"http://localhost:8000/budgets\")\n    // //   .pipe(\n    // //     map((budgetData) => {\n    // //       return budgetData.budgets.map((budget) => {\n    // //         return {\n    // //           id: budget._id,\n    // //           budgetItem: budget.budgetItem,\n    // //           budgetCategory: budget.budgetCategory,\n    // //           percentage: budget.percentage,\n    // //           percentageCategory: budget.percentageCategory,\n    // //           exemptFromRecalculation: budget.exemptFromRecalculation,\n    // //           fixedPriceValue: budget.fixedPriceValue,\n    // //           contribution: budget.contribution,\n    // //         };\n    // //       });\n    // //     })\n    // //   )\n    // //   .subscribe((transformedBudgets) => {\n    // //     this.budgets = transformedBudgets;\n    // //     this.budgetsUpdated.next([...this.budgets]);\n    // //   });\n  }\n\n  getBudgetUpdateListener() {\n    return this.budgetsUpdated.asObservable();\n  }\n\n  getBudget(id: string) {\n    return this.http.get<{\n      _id: string;\n      budgetItem: string;\n      budgetCategory: string;\n      percentage: number;\n      percentageCategory: number;\n      exemptFromRecalculation: boolean;\n      fixedPriceValue: number;\n      contribution: number;\n    }>(\"http://localhost:8000/budgets/\" + id);\n  }\n\n  addBudget(\n    budgetItem: string,\n    budgetCategory: string,\n    percentage,\n    percentageCategory,\n    exemptFromRecalculation,\n    fixedPriceValue,\n    contribution\n  ) {\n    const budgetData = new FormData();\n    budgetData.append(\"budgetItem\", budgetItem);\n    budgetData.append(\"budgetCategory\", budgetCategory);\n    budgetData.append(\"percentage\", percentage);\n    budgetData.append(\"percentageCategory\", percentageCategory);\n    budgetData.append(\"exemptFromRecalculation\", exemptFromRecalculation);\n    budgetData.append(\"fixedPriceValue\", fixedPriceValue);\n    budgetData.append(\"contribution\", contribution);\n    this.http\n      .post(\"http://localhost:8000/budgets\", {\n        budgetItem: budgetItem,\n        budgetCategory: budgetCategory,\n        percentage: percentage,\n        percentageCategory: percentageCategory,\n        exemptFromRecalculation: exemptFromRecalculation,\n        fixedPriceValue: fixedPriceValue,\n        contribution: contribution,\n      })\n      .subscribe((responseData: string) => {\n        const budget: Budget = {\n          _id: responseData,\n          budgetItem: budgetItem,\n          budgetCategory: budgetCategory,\n          percentage: percentage,\n          percentageCategory: percentageCategory,\n          exemptFromRecalculation: exemptFromRecalculation,\n          fixedPriceValue: fixedPriceValue,\n          contribution: contribution,\n        };\n        this.budgets.push(budget);\n        this.budgetsUpdated.next([...this.budgets]);\n        this.router.navigate([\"/budgets\"]);\n      });\n  }\n\n  updateBudget(\n    id: string,\n    budgetItem: string,\n    budgetCategory: string,\n    percentage: number,\n    percentageCategory: number,\n    exemptFromRecalculation: boolean,\n    fixedPriceValue: number,\n    contribution: number\n  ) {\n    const budgetData = {\n      budgetItem: budgetItem,\n      budgetCategory: budgetCategory,\n      percentage: percentage,\n      percentageCategory: percentageCategory,\n      exemptFromRecalculation: exemptFromRecalculation,\n      fixedPriceValue: fixedPriceValue,\n      contribution: contribution,\n    };\n    console.log(\"we are updating\" + id);\n    this.http\n      .patch(\"http://localhost:8000/budgets/\" + id, budgetData)\n      .subscribe((response) => {\n        const updatedBudgets = [...this.budgets];\n        const oldBudgetIndex = updatedBudgets.findIndex((p) => p._id === id);\n        const budget: Budget = {\n          _id: id,\n          budgetItem: budgetItem,\n          budgetCategory: budgetCategory,\n          percentage: percentage,\n          percentageCategory: percentageCategory,\n          exemptFromRecalculation: exemptFromRecalculation,\n          fixedPriceValue: fixedPriceValue,\n          contribution: contribution,\n        };\n        updatedBudgets[oldBudgetIndex] = budget;\n        this.budgets = updatedBudgets;\n        this.budgetsUpdated.next([...this.budgets]);\n        this.router.navigate([\"/budgets\"]);\n      });\n  }\n\n  deleteBudget(budgetId: string) {\n    this.http\n      .delete(\"http://localhost:8000/budgets/\" + budgetId)\n      .subscribe(() => {\n        const updatedBudgets = this.budgets.filter(\n          (budget) => budget._id !== budgetId\n        );\n        this.budgets = updatedBudgets;\n        this.budgetsUpdated.next([...this.budgets]);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BudgetsService-1"
        },
        {
            "name": "CardsService",
            "id": "injectable-CardsService-e9ac3da0a0342d7f70e105b0643899ec0518e92e651cf1eaf46ab464ef91850ddcae04ed7890ea48f3306fc9e9659073b482fa64ff774109bda7bd18f6fa3162",
            "file": "nestbackend/src/cards/cards.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createCardDto",
                            "type": "CreateCardDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createCardDto",
                            "type": "CreateCardDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateCardDto",
                            "type": "UpdateCardDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateCardDto",
                            "type": "UpdateCardDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CreateCardDto } from './dto/create-card.dto';\nimport { UpdateCardDto } from './dto/update-card.dto';\n\n@Injectable()\nexport class CardsService {\n  create(createCardDto: CreateCardDto) {\n    return 'This action adds a new card';\n  }\n\n  findAll() {\n    return `This action returns all cards`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} card`;\n  }\n\n  update(id: number, updateCardDto: UpdateCardDto) {\n    return `This action updates a #${id} card`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} card`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "CardsService",
            "id": "injectable-CardsService-45d70cc9e482b80ba166f64f0ce009cbc805abc17e0ad4a8c313cba5159d908bbfa414e4fdff44d2fc38493149be9aa0aa9be450fc60a261eaf0163f527680a0-1",
            "file": "src/app/card/card.service.ts",
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cardsUpdated",
                    "defaultValue": "new Subject<Card[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addCard",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "image",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCard",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCard",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCardUpdateListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCard",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "image",
                            "type": "File | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "interest",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dueDate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "institution",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "balance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "File | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport { Card } from './card.model';\n\n@Injectable({ providedIn: 'root' })\nexport class CardsService {\n  private cards: Card[] = [];\n  private cardsUpdated = new Subject<Card[]>();\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  getCards() {\n    this.http\n      .get<{ message: string; cards: any }>('http://localhost:3000/api/cards')\n      .pipe(\n        map(cardData => {\n          return cardData.cards.map(card => {\n            return {\n              title: card.title,\n              content: card.content,\n              id: card._id,\n              name: card.name,\n              description: card.description,\n              interest: card.interest,\n              limit: card.limit,\n              dueDate: card.dueDate,\n              institution: card.institution,\n              balance: card.balance,\n              imagePath: card.imagePath\n            };\n          });\n        })\n      )\n      .subscribe(transformedCards => {\n        this.cards = transformedCards;\n        this.cardsUpdated.next([...this.cards]);\n      });\n  }\n\n  getCardUpdateListener() {\n    return this.cardsUpdated.asObservable();\n  }\n\n  getCard(id: string) {\n    return this.http.get<{\n      _id: string,\n      title: string,\n      content: string,\n      name: string,\n      description: string,\n      interest: number,\n      limit: number,\n      dueDate: Date,\n      institution: string,\n      balance: number,\n      imagePath: string\n    }>(\n      'http://localhost:3000/api/cards/' + id\n    );\n  }\n\n  addCard(\n    title: string,\n    content: string,\n    name: string,\n    description: string,\n    interest,\n    limit,\n    dueDate,\n    institution: string,\n    balance,\n    image: File\n  ) {\n    const cardData = new FormData();\n    cardData.append('title', title);\n    cardData.append('content', content);\n    cardData.append('name', name);\n    cardData.append('description', description);\n    cardData.append('interest', interest);\n    cardData.append('limit', limit);\n    cardData.append('dueDate', dueDate);\n    cardData.append('institution', institution);\n    cardData.append('balance', balance);\n    cardData.append('image', image, title);\n    this.http\n      .post<{ message: string; card: Card }>(\n        'http://localhost:3000/api/cards',\n        cardData\n      )\n      .subscribe(responseData => {\n        const card: Card = {\n          id: responseData.card.id,\n          title: title,\n          content: content,\n          name: name,\n          description: description,\n          interest: interest,\n          limit: limit,\n          dueDate: dueDate,\n          institution: institution,\n          balance: balance,\n          imagePath: responseData.card.imagePath\n        };\n        this.cards.push(card);\n        this.cardsUpdated.next([...this.cards]);\n        this.router.navigate(['/']);\n      });\n  }\n\n  updateCard(\n    id: string,\n    title: string,\n    content: string,\n    name: string,\n    description: string,\n    interest,\n    limit,\n    dueDate,\n    institution: string,\n    balance,\n    image: File | string\n  ) {\n    let cardData: Card | FormData;\n\n    if (typeof image === 'object') {\n      cardData = new FormData();\n      cardData.append('id', id);\n      cardData.append('title', title);\n      cardData.append('content', content);\n      cardData.append('name', name);\n      cardData.append('description', description);\n      cardData.append('interest', interest);\n      cardData.append('limit', limit);\n      cardData.append('dueDate', dueDate);\n      cardData.append('institution', institution);\n      cardData.append('balance', balance);\n      cardData.append('image', image, title);\n    } else {\n      cardData = {\n        id: id,\n        title: title,\n        content: content,\n        name: name,\n        description: description,\n        interest: interest,\n        limit: limit,\n        dueDate: dueDate,\n        institution: institution,\n        balance: balance,\n        imagePath: image\n      };\n    }\n    this.http\n      .put('http://localhost:3000/api/cards/' + id, cardData)\n      .subscribe(response => {\n        const updatedCards = [...this.cards];\n        const oldCardIndex = updatedCards.findIndex(p => p.id === id);\n        const card: Card = {\n          id: id,\n          title: title,\n          content: content,\n          name: name,\n          description: description,\n          interest: interest,\n          limit: limit,\n          dueDate: dueDate,\n          institution: institution,\n          balance: balance,\n          imagePath: ''\n        };\n        updatedCards[oldCardIndex] = card;\n        this.cards = updatedCards;\n        this.cardsUpdated.next([...this.cards]);\n        this.router.navigate(['/']);\n      });\n  }\n\n  deleteCard(cardId: string) {\n    this.http\n      .delete('http://localhost:3000/api/cards/' + cardId)\n      .subscribe(() => {\n        const updatedCards = this.cards.filter(card => card.id !== cardId);\n        this.cards = updatedCards;\n        this.cardsUpdated.next([...this.cards]);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CardsService-1"
        },
        {
            "name": "ChartsService",
            "id": "injectable-ChartsService-0b92c2743e78249336ed9a33d815ed13efdde54d1f39887a7a71856860480f6c4299523ca31f92a32a68e4462686a4120e0777ad33d7472e7661d570387b3dbb",
            "file": "nestbackend/src/charts/charts.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createChartDto",
                            "type": "CreateChartDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createChartDto",
                            "type": "CreateChartDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateChartDto",
                            "type": "UpdateChartDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateChartDto",
                            "type": "UpdateChartDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CreateChartDto } from './dto/create-chart.dto';\nimport { UpdateChartDto } from './dto/update-chart.dto';\n\n@Injectable()\nexport class ChartsService {\n  create(createChartDto: CreateChartDto) {\n    return 'This action adds a new chart';\n  }\n\n  findAll() {\n    return `This action returns all charts`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} chart`;\n  }\n\n  update(id: number, updateChartDto: UpdateChartDto) {\n    return `This action updates a #${id} chart`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} chart`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "IncomeService",
            "id": "injectable-IncomeService-ddebee077afd646c99317f37075b8c51887b6ec129a746d1937029c3ff488d44625e948474f44a738222e189209b63115503fd1524df516a18c66ea1999869e6",
            "file": "src/app/income/income.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IncomeService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "IncomesService",
            "id": "injectable-IncomesService-d60e66617fae952814075c7bfe852bcd53ad9d7bcf637c2c3d09b71c3d23389ce5fec50736bacda7c6b9d80d9363c0b3cc0fcd26b239e4c4371e8b33c01c8db2",
            "file": "nestbackend/src/incomes/incomes.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createIncomeDto",
                            "type": "CreateIncomeDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createIncomeDto",
                            "type": "CreateIncomeDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateIncomeDto",
                            "type": "UpdateIncomeDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateIncomeDto",
                            "type": "UpdateIncomeDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CreateIncomeDto } from './dto/create-income.dto';\nimport { UpdateIncomeDto } from './dto/update-income.dto';\n\n@Injectable()\nexport class IncomesService {\n  create(createIncomeDto: CreateIncomeDto) {\n    return 'This action adds a new income';\n  }\n\n  findAll() {\n    return `This action returns all incomes`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} income`;\n  }\n\n  update(id: number, updateIncomeDto: UpdateIncomeDto) {\n    return `This action updates a #${id} income`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} income`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "InstitutionsService",
            "id": "injectable-InstitutionsService-5d3fe63ead133f49373497c3e02411859cd565fe2b6bca5c6789f413ff957327d5b3c46bd7bc87a51064941581b159e1de2f9879aa80d51d0170da1709e379f2",
            "file": "nestbackend/src/institutions/institutions.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createInstitutionDto",
                            "type": "CreateInstitutionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createInstitutionDto",
                            "type": "CreateInstitutionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateInstitutionDto",
                            "type": "UpdateInstitutionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateInstitutionDto",
                            "type": "UpdateInstitutionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CreateInstitutionDto } from './dto/create-institution.dto';\nimport { UpdateInstitutionDto } from './dto/update-institution.dto';\n\n@Injectable()\nexport class InstitutionsService {\n  create(createInstitutionDto: CreateInstitutionDto) {\n    return 'This action adds a new institution';\n  }\n\n  findAll() {\n    return `This action returns all institutions`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} institution`;\n  }\n\n  update(id: number, updateInstitutionDto: UpdateInstitutionDto) {\n    return `This action updates a #${id} institution`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} institution`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "InvestmentService",
            "id": "injectable-InvestmentService-ce75c43e1155456548c3f63564896d90ce02bb35487359c7d1b06c7c33889319790b253062dd0b89c70ac414f1c8f05aa347c4e590a7bdaffac74f15cbc0d2d4",
            "file": "src/app/investment/investment.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InvestmentService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "InvestmentsService",
            "id": "injectable-InvestmentsService-c174448dc25fd69df99b4f4421cc902fd14d1ac255b20932a5df5c026f46ec45e989ccdfb55ac4d303f95cb8bdd5b75695e04393db5d164bd81f5bd967a80fe6",
            "file": "nestbackend/src/investments/investments.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createInvestmentDto",
                            "type": "CreateInvestmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createInvestmentDto",
                            "type": "CreateInvestmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateInvestmentDto",
                            "type": "UpdateInvestmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateInvestmentDto",
                            "type": "UpdateInvestmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CreateInvestmentDto } from './dto/create-investment.dto';\nimport { UpdateInvestmentDto } from './dto/update-investment.dto';\n\n@Injectable()\nexport class InvestmentsService {\n  create(createInvestmentDto: CreateInvestmentDto) {\n    return 'This action adds a new investment';\n  }\n\n  findAll() {\n    return `This action returns all investments`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} investment`;\n  }\n\n  update(id: number, updateInvestmentDto: UpdateInvestmentDto) {\n    return `This action updates a #${id} investment`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} investment`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "LiabilitiesService",
            "id": "injectable-LiabilitiesService-9e5e4de852357257410289579ecf9ccbe4ba6e66050d73e057a3fb48feed0c67903f0b637c4b9875e3c3416e72aadb1623c8e3fc2b4a1a1344514f6e85e66a27",
            "file": "nestbackend/src/liabilities/liabilities.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createLiabilityDto",
                            "type": "CreateLiabilityDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createLiabilityDto",
                            "type": "CreateLiabilityDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateLiabilityDto",
                            "type": "UpdateLiabilityDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateLiabilityDto",
                            "type": "UpdateLiabilityDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CreateLiabilityDto } from './dto/create-liability.dto';\nimport { UpdateLiabilityDto } from './dto/update-liability.dto';\n\n@Injectable()\nexport class LiabilitiesService {\n  create(createLiabilityDto: CreateLiabilityDto) {\n    return 'This action adds a new liability';\n  }\n\n  findAll() {\n    return `This action returns all liabilities`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} liability`;\n  }\n\n  update(id: number, updateLiabilityDto: UpdateLiabilityDto) {\n    return `This action updates a #${id} liability`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} liability`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "LiabilityService",
            "id": "injectable-LiabilityService-2a6656c4eeaaf0a91c3026ccb4ea5145b3e51c7412e298ccdf15c2724e451416f77519a6c61d8798f64fafe64e827fbf176bb9f495a504bdce5876684918a372",
            "file": "src/app/liability/liability.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LiabilityService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "LoanService",
            "id": "injectable-LoanService-5d716b49c3511b1b6258be09245b8a9de31eb748a89d263671033d5ccdd9ef32aeaa044d7cae49d78d8fdc8efd3b86bb5841a93aee86906273c38e32bfc41ea0",
            "file": "src/app/loan/loan.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoanService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "LoansService",
            "id": "injectable-LoansService-b450a770faa4d66d3e429dc9fef08d0a0bc453753e93ae0b0de171cfa34dd32f82aab36b38eef6d7c3fbc55107dceed2090da1f295699c586fe727734457f332",
            "file": "nestbackend/src/loans/loans.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createLoanDto",
                            "type": "CreateLoanDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createLoanDto",
                            "type": "CreateLoanDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateLoanDto",
                            "type": "UpdateLoanDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateLoanDto",
                            "type": "UpdateLoanDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CreateLoanDto } from './dto/create-loan.dto';\nimport { UpdateLoanDto } from './dto/update-loan.dto';\n\n@Injectable()\nexport class LoansService {\n  create(createLoanDto: CreateLoanDto) {\n    return 'This action adds a new loan';\n  }\n\n  findAll() {\n    return `This action returns all loans`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} loan`;\n  }\n\n  update(id: number, updateLoanDto: UpdateLoanDto) {\n    return `This action updates a #${id} loan`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} loan`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "PostsService",
            "id": "injectable-PostsService-5fc4186d376d007de53ebf2b575f4e5e215a63c107549a9c56fd03d8ed4ecd7b0bb6afdd60abcc75c847f0160081cc1ee327138b41048a9be484d993383dd301",
            "file": "src/app/posts/posts.service.ts",
            "properties": [
                {
                    "name": "posts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Post[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "postsUpdated",
                    "defaultValue": "new Subject<Post[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addPost",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "image",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePost",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPost",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPosts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPostUpdateListener",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updatePost",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "image",
                            "type": "File | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "image",
                            "type": "File | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport { Post } from './post.model';\n\n@Injectable({ providedIn: 'root' })\nexport class PostsService {\n  private posts: Post[] = [];\n  private postsUpdated = new Subject<Post[]>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getPosts() {\n    this.http\n      .get<{ message: string; posts: any }>('http://localhost:3000/api/posts')\n      .pipe(\n        map(postData => {\n          return postData.posts.map(post => {\n            return {\n              title: post.title,\n              content: post.content,\n              id: post._id,\n              imagePath: post.imagePath\n            };\n          });\n        })\n      )\n      .subscribe(transformedPosts => {\n        this.posts = transformedPosts;\n        this.postsUpdated.next([...this.posts]);\n      });\n  }\n\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n\n  getPost(id: string) {\n    return this.http.get<{ _id: string, title: string, content: string, imagePath: string }>(\n      'http://localhost:3000/api/posts/' + id\n    );\n  }\n\n  addPost(title: string, content: string, image: File) {\n    const postData = new FormData();\n    postData.append('title', title);\n    postData.append('content', content);\n    postData.append('image', image, title);\n    this.http\n      .post<{ message: string; post: Post }>(\n        'http://localhost:3000/api/posts',\n        postData\n      )\n      .subscribe(responseData => {\n        const post: Post = {\n          id: responseData.post.id,\n          title: title,\n          content: content,\n          imagePath: responseData.post.imagePath\n        };\n        this.posts.push(post);\n        this.postsUpdated.next([...this.posts]);\n        this.router.navigate(['/']);\n      });\n  }\n\n  updatePost(id: string, title: string, content: string, image: File | string) {\n    let postData: Post | FormData;\n    if (typeof image === 'object') {\n      postData = new FormData();\n      postData.append('id', id);\n      postData.append('title', title);\n      postData.append('content', content);\n      postData.append('image', image, title);\n    } else {\n      postData = {\n        id: id,\n        title: title,\n        content: content,\n        imagePath: image\n      };\n    }\n    this.http\n      .put('http://localhost:3000/api/posts/' + id, postData)\n      .subscribe(response => {\n        const updatedPosts = [...this.posts];\n        const oldPostIndex = updatedPosts.findIndex(p => p.id === id);\n        const post: Post = {\n          id: id,\n          title: title,\n          content: content,\n          imagePath: ''\n        };\n        updatedPosts[oldPostIndex] = post;\n        this.posts = updatedPosts;\n        this.postsUpdated.next([...this.posts]);\n        this.router.navigate(['/']);\n      });\n  }\n\n  deletePost(postId: string) {\n    this.http\n      .delete('http://localhost:3000/api/posts/' + postId)\n      .subscribe(() => {\n        const updatedPosts = this.posts.filter(post => post.id !== postId);\n        this.posts = updatedPosts;\n        this.postsUpdated.next([...this.posts]);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsService",
            "id": "injectable-ProductsService-c75402c828f8c64cf6725914bffc23add78c6eb46259bf2e03d3d53fc6af1b8cb0c09adc9b4e736d34c379ad74d040f04afd00d28e18fe4d3d62e81356c4e22c",
            "file": "nestbackend/src/products/products.service.ts",
            "properties": [
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "prodId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prodId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSingleProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertProduct",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "desc",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "price",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "desc",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "price",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "desc",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "price",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "desc",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "price",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, NotFoundException } from '@nestjs/common';\n\nimport { Product } from './products.model';\n\n@Injectable()\nexport class ProductsService {\n  private products: Product[] = [];\n\n  insertProduct(title: string, desc: string, price: number) {\n    const prodId = Math.random().toString();\n    const newProduct = new Product(prodId, title, desc, price);\n    this.products.push(newProduct);\n    return prodId;\n  }\n\n  getProducts() {\n    return [...this.products];\n  }\n\n  getSingleProduct(productId: string) {\n    const product = this.findProduct(productId)[0];\n    return { ...product };\n  }\n\n  updateProduct(productId: string, title: string, desc: string, price: number) {\n    const [product, index] = this.findProduct(productId);\n    const updatedProduct = { ...product };\n    if (title) {\n      updatedProduct.title = title;\n    }\n    if (desc) {\n      updatedProduct.description = desc;\n    }\n    if (price) {\n      updatedProduct.price = price;\n    }\n    this.products[index] = updatedProduct;\n  }\n\n  deleteProduct(prodId: string) {\n    const index = this.findProduct(prodId)[1];\n    this.products.splice(index, 1);\n  }\n\n  private findProduct(id: string): [Product, number] {\n    const productIndex = this.products.findIndex((prod) => prod.id === id);\n    const product = this.products[productIndex];\n    if (!product) {\n      throw new NotFoundException('Could not find product.');\n    }\n    return [product, productIndex];\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "WishesService",
            "id": "injectable-WishesService-7120982559061d9cd391187d8b74cd5f9217a6dc324d99ba200996c0548590714116f1b1a1d11652d1430cb4ab94941727353815938110b3620c2cc9af22198a",
            "file": "nestbackend/src/wishes/wishes.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "createWishDto",
                            "type": "CreateWishDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "createWishDto",
                            "type": "CreateWishDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAll",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findOne",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateWishDto",
                            "type": "UpdateWishDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateWishDto",
                            "type": "UpdateWishDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { CreateWishDto } from './dto/create-wish.dto';\nimport { UpdateWishDto } from './dto/update-wish.dto';\n\n@Injectable()\nexport class WishesService {\n  create(createWishDto: CreateWishDto) {\n    return 'This action adds a new wish';\n  }\n\n  findAll() {\n    return `This action returns all wishes`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} wish`;\n  }\n\n  update(id: number, updateWishDto: UpdateWishDto) {\n    return `This action updates a #${id} wish`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} wish`;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "WishService",
            "id": "injectable-WishService-9baeb1a4dad36e6b85e52a5aa0ab318cdb2f952d5b83f79fa8a8f542fd431122f79b52079a067fbea4669eac1f51ae700a29b70509f753dbb9a575f693ac7aaf",
            "file": "src/app/wish/wish.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WishService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Account",
            "id": "class-Account-946287a6d4672d6d44e9c8b6d8e323248d823071e524adfca5f4fc2c07c96d3adf0979da597fb03f980ad0bc9d0bcb049293189de7a341002e86458afe69fee8",
            "file": "nestbackend/src/accounts/entities/account.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Account {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-df9dfad5393b12586ada456e859df72b0622775cf7ea41fd8f630001322f11696d2432cdb642d128b7fea066b18e9fb80b651d73f290a68066677a25ec8a9f43",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get('/');\n  }\n\n  getParagraphText() {\n    return element(by.css('app-root h1')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getParagraphText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Asset",
            "id": "class-Asset-381abd038e3dc890a141c26a72849fcd319e70131cf52f0f7928ac4195f257ac319a13ffa601dae49b1c867e0ba3644797afc95db9cc578a6c2dd99eace5b111",
            "file": "nestbackend/src/assets/entities/asset.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Asset {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Budget",
            "id": "class-Budget-e22b9170b6190480dcf1234c35348016d7cdbfc27a29f957ffed33f5757eff93473b0d8cab47cdfc90cd23ee44a34e514c496f37c6d06d446ef76f76aa218d5d",
            "file": "src/app/budget/budget.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Budget {\n  _id: string;\n  budgetItem: string;\n  budgetCategory: string;\n  percentage: number;\n  percentageCategory: number;\n  exemptFromRecalculation: boolean;\n  fixedPriceValue: number;\n  contribution: number;\n}\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "budgetCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "budgetItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "contribution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "exemptFromRecalculation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fixedPriceValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "percentageCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Card",
            "id": "class-Card-b6ed73c827fc09e1df5a5841e2a0004c66f5ba6f08bd062ecf1700b788ae253b5025abe6d689d79c514656a7506ea1d8e188d4d94d819b8934becfc3ab00e595",
            "file": "nestbackend/src/cards/entities/card.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Card {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Chart",
            "id": "class-Chart-1068ffc12148d6ed5e8dc31f732fbb14cfefa943be94ff0faf78eeb8b22a7c84f041135f1bc2c005dc6a4d1e11d88241cee247938a330722ff157946395f2046",
            "file": "nestbackend/src/charts/entities/chart.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Chart {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateAccountDto",
            "id": "class-CreateAccountDto-7ddefb79d10a49da240691367086b157609e912e269669b00fa9e3ad1b9fb33a113dd73e93dbcc2ed6cede5f4294dbc100f12355b83cde9a58a4345675b44717",
            "file": "nestbackend/src/accounts/dto/create-account.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateAccountDto {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateAssetDto",
            "id": "class-CreateAssetDto-5a7c05f80067b067a55800e89a430deadd59a45341fe728a1e85c8201b00d070241d3ea3884fcba70c16083d9852e08bddafe64978d479f3bb2e7e314f8e98d4",
            "file": "nestbackend/src/assets/dto/create-asset.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateAssetDto {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateBillDto",
            "id": "class-CreateBillDto-6655205518252c8d64b17cccd8d287f526b088400853053645122d03b4b0ac6ffc7d5969820681322252f8723974a34bb7ccff1284deff2e8246c06dc30c17c2",
            "file": "nestbackend/src/bills/dto/create-bill.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateBillDto {\n  title: string;\n  amount: number;\n  description: string;\n  institution: string;\n  category: string;\n  frequency: string;\n  dueDate: Date;\n  paymentMethod: string;\n  imagePath: string;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "frequency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "institution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "paymentMethod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateBudgetDto",
            "id": "class-CreateBudgetDto-b62444bb7db8f9435d2182df09c49e1af3446f1331ae5b4ffe8930b06194940a1550d65c6ad613331c8e6bdb9d82d50939bccbc4a67dfbadcb51014a40e7536b",
            "file": "nestbackend/src/budgets/dto/create-budget.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateBudgetDto {\n  budgetItem: string;\n  budgetCategory: string;\n  percentage: number;\n  percentageCategory: number;\n  exemptFromRecalculation: boolean;\n  fixedPriceValue: number;\n  contribution: number;\n}\n",
            "properties": [
                {
                    "name": "budgetCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "budgetItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "contribution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "exemptFromRecalculation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fixedPriceValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "percentageCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateCardDto",
            "id": "class-CreateCardDto-4814a299f86f0a28c3b3d46390261fbba46eea7869e780c33145e420a2c04332cee1e97db6fb3fba58b5654726cf10a0c75f1f3316eac085aeaed28ef9281042",
            "file": "nestbackend/src/cards/dto/create-card.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateCardDto {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateChartDto",
            "id": "class-CreateChartDto-0af73dfea53d69c45dd2a08775fb2a58248e4e0888bccaea0fa96efaff962c7579f6c5de6402c11fab3bf763dafb91e3f2eee0abe5edbee3665b47ee621efff9",
            "file": "nestbackend/src/charts/dto/create-chart.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateChartDto {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateIncomeDto",
            "id": "class-CreateIncomeDto-dad67d6a21f018df20b9dbbacfeceb831d69bce32c6d188fd4f664bae8e166ba46e09fdb9ba43b8c0baaff97c27c2cf748758bf6126f85b23a014f849ee2abc7",
            "file": "nestbackend/src/incomes/dto/create-income.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateIncomeDto {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateInstitutionDto",
            "id": "class-CreateInstitutionDto-1fa07d9e7bd61deabd6727c6c36f1207397ab4c4b24d507110857759dd44e790a679b0b62a7caaa8efdf1feac07513e67efde79201dd6bffc03dd94c048821fe",
            "file": "nestbackend/src/institutions/dto/create-institution.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateInstitutionDto {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateInvestmentDto",
            "id": "class-CreateInvestmentDto-6148db5155e7621992c5ddf4879fa02a92f3acb052b1d435e6992de1984f9b2af62d150d76376c8126a304cf7403cfcedfe96012288be3ca1c12e17527daa841",
            "file": "nestbackend/src/investments/dto/create-investment.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateInvestmentDto {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateLiabilityDto",
            "id": "class-CreateLiabilityDto-e54c9d95723d5c431599632453e9d865398ff95ca25604c31cf35e6f0faaa1c69302ef6d18f472612ea24f9eabcf4f33cf13b35143b2721842efd2b0cead7c62",
            "file": "nestbackend/src/liabilities/dto/create-liability.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateLiabilityDto {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateLoanDto",
            "id": "class-CreateLoanDto-7ce0ebd3bd03a2abe1c58f6f9cedf00014452f3c3020cff64edc58e8e7ab8e95cc810b256f2532c7cf79c4e23fc09513efee67620a6c8e60439fe0abb16c0ef2",
            "file": "nestbackend/src/loans/dto/create-loan.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateLoanDto {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateWishDto",
            "id": "class-CreateWishDto-acf0f5d678b18ac9796c03ab263fe9658b7d606f8e888cabd5cec341630eab05b23d5bf2b2761d5ad2a26c7035370637214a6496f6dd47e8a877592ee4abfeaa",
            "file": "nestbackend/src/wishes/dto/create-wish.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateWishDto {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Income",
            "id": "class-Income-c0e5ad1ab5b470689b137f5f18fa4bad5c3fc4b7d75fd708079e6ca7a3f774cb9266b80f00a3d86f29a8bdc9c7d78235db9890ff0420b7f77d896a94b918dca2",
            "file": "src/app/income/income.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Income {\n}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Income",
            "id": "class-Income-f76a1378565ed0a237699814a09277b501d9f412a80c79e424ffe7ef222b5cd5dcb2bc346b28f6fe03aefa771c5f639f8cc9d6547a69ee45eb72fdc62cdf34c3-1",
            "file": "nestbackend/src/incomes/entities/income.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Income {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Income-1"
        },
        {
            "name": "Institution",
            "id": "class-Institution-15cff837d3d8b9471950ebbb3f9b993e823493bf2a7acd24cfa7b3f377ef723628cc649bc929be7c420548f9aa618f5dc16ece72234c574af5e85cc89fbc53be",
            "file": "nestbackend/src/institutions/entities/institution.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Institution {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Investment",
            "id": "class-Investment-893d9a1af6ba397c2b89a2080f1800e208e881ceea75896a6f5ba8829db9200b75f76d5be90c9be9ef7308035e7c20c2dfb1d52d798e82665796dd55151c1978",
            "file": "src/app/investment/investment.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Investment {\n}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Investment",
            "id": "class-Investment-947153be158bea0e47717cf5db183bb9614614a302e90c3e60c17feb9596aa026d3385b737f93a32c0a0d14e123376e4476b57d8fc7d309e6e9ce490b54224a0-1",
            "file": "nestbackend/src/investments/entities/investment.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Investment {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Investment-1"
        },
        {
            "name": "Liability",
            "id": "class-Liability-e5b241e64117a658c91b39c1da73ba9f65d947d84ada9e9f5318e0fac1480bd0d03da222348709f680e7cecf74e347888f0c19dc4652a0872ee8f465cb288f10",
            "file": "src/app/liability/liability.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Liability {\n}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Liability",
            "id": "class-Liability-b21df1b939dd907260412b5a45ab0d7565f12dd73b905427daa52450c58eaddb2510aaea869c24126aff077a340128e049597e8219477b4d4e748762e6b9142b-1",
            "file": "nestbackend/src/liabilities/entities/liability.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Liability {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Liability-1"
        },
        {
            "name": "Loan",
            "id": "class-Loan-1c2cdc8bcd46f9022670e0abbcdde65b0d0b2c5643390526a1a788d51b8a4b8ac4d221d66099a4b7eeccb2227ce8d25fc73f4e0c86e02a94b4ef61099344e59d",
            "file": "src/app/loan/loan.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Loan {\n}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Loan",
            "id": "class-Loan-4df05cd0f289eeda6766c4cb0372d4296e0f08eaf553fed6b864e11a9399e0ba8fc0cc45a4f811ca13bbc07722c18c6ee406148f8e6a188b23905d44883beed6-1",
            "file": "nestbackend/src/loans/entities/loan.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Loan {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Loan-1"
        },
        {
            "name": "Product",
            "id": "class-Product-45c7fae7f3745a1f703dc172cae0035db6760055dc685e8c75f608373e079e470b9d42dde607ac031f054208678410a5293b38070cc9d6b480132067993ee1f1",
            "file": "nestbackend/src/products/products.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Product {\n  constructor(\n    public id: string,\n    public title: string,\n    public description: string,\n    public price: number,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "price",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "title",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "price",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateAccountDto",
            "id": "class-UpdateAccountDto-a57794a5cd70f6bf98ea0a6b9bc4d5ee554d5f7d578989ac19123c2f6fe6189de623648d329fc688420042546e3e66029de76b5aa9a4f98b5911e722c10b202c",
            "file": "nestbackend/src/accounts/dto/update-account.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAccountDto } from './create-account.dto';\n\nexport class UpdateAccountDto extends PartialType(CreateAccountDto) {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateAssetDto",
            "id": "class-UpdateAssetDto-95636bf74af3ae5a335d8a113d4304466006718902a875c107d30f5d3a6c9a570f2f3bc22441164e30ddac7a3af863afd3f6b85b921d1d6c38b38bc48ef521c2",
            "file": "nestbackend/src/assets/dto/update-asset.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAssetDto } from './create-asset.dto';\n\nexport class UpdateAssetDto extends PartialType(CreateAssetDto) {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateBillDto",
            "id": "class-UpdateBillDto-716631d20129657187388fa3df3bb2a80e6648ee8c239c8c8eb4a3c8693dac3c62e09e0bbbc22ed054f4ed459ccb9caca68b91606628e92dfd82d4304aa4baa8",
            "file": "nestbackend/src/bills/dto/update-bill.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CreateBillDto } from './create-bill.dto';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class UpdateBillDto extends PartialType(CreateBillDto) {\n  title: string;\n  amount: number;\n  description: string;\n  institution: string;\n  category: string;\n  frequency: string;\n  dueDate: Date;\n  paymentMethod: string;\n  imagePath: string;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "frequency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "institution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "paymentMethod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateBudgetDto",
            "id": "class-UpdateBudgetDto-b4302354aef9a5bd2b2ce4fe63b51615aeaf20f4afd88e50b5d558b5c963727d2838400188fc6f8a0c4fa3a23d66dd2590c58002fe8ac1703729cdf3655f4746",
            "file": "nestbackend/src/budgets/dto/update-budget.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CreateBudgetDto } from './create-budget.dto';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class UpdateBudgetDto extends PartialType(CreateBudgetDto) {\n  budgetItem: string;\n  budgetCategory: string;\n  percentage: number;\n  percentageCategory: number;\n  exemptFromRecalculation: boolean;\n  fixedPriceValue: number;\n  contribution: number;\n}\n",
            "properties": [
                {
                    "name": "budgetCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "budgetItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "contribution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "exemptFromRecalculation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "fixedPriceValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "percentageCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateCardDto",
            "id": "class-UpdateCardDto-2cdaac0d713d38d30d60bc029e2a5d1e67f8252c569100831228d0b6dda2f93f129f485b2d2339ea260e1d21b16a5078b0385f93bcf425fee52a5b40750d5717",
            "file": "nestbackend/src/cards/dto/update-card.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCardDto } from './create-card.dto';\n\nexport class UpdateCardDto extends PartialType(CreateCardDto) {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateChartDto",
            "id": "class-UpdateChartDto-db681adb705444d345fc2a399e042d6c2938755532d811d88a6216e9219d5dabad29ccb25100381a1a6a31b7e3631d029788c3b69132220417203dbf396f655d",
            "file": "nestbackend/src/charts/dto/update-chart.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateChartDto } from './create-chart.dto';\n\nexport class UpdateChartDto extends PartialType(CreateChartDto) {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateIncomeDto",
            "id": "class-UpdateIncomeDto-23c21584491942d00755b367bbe1fa652d2d91d2d8e4fef457ca9a1338fbdb7dcf0453f1f856082ed9f04448e21eebc2882dd77b84b6b83e442de62e7df56c27",
            "file": "nestbackend/src/incomes/dto/update-income.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateIncomeDto } from './create-income.dto';\n\nexport class UpdateIncomeDto extends PartialType(CreateIncomeDto) {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateInstitutionDto",
            "id": "class-UpdateInstitutionDto-d9925d06a08fa2e63ddc4b54cdfa4a7a46402cd3fc9cb4ad08f720f124daec34ad4f3eebc9581302d21a47406fe64eb62ec5963e41c6fe0460127eea3b9ae35c",
            "file": "nestbackend/src/institutions/dto/update-institution.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateInstitutionDto } from './create-institution.dto';\n\nexport class UpdateInstitutionDto extends PartialType(CreateInstitutionDto) {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateInvestmentDto",
            "id": "class-UpdateInvestmentDto-484f8f6b44fda7ee56d2503375932fbae5eb787071a25230dfdbf13ca4ec423d2d17e9a008e1a4fb9a5995b8d33fe5f4fc4ab6e22700ad63a90926c2f800bba5",
            "file": "nestbackend/src/investments/dto/update-investment.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateInvestmentDto } from './create-investment.dto';\n\nexport class UpdateInvestmentDto extends PartialType(CreateInvestmentDto) {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateLiabilityDto",
            "id": "class-UpdateLiabilityDto-df8f827011de3ee14dd161415a81796f5f08b876c89a4745a3bb931fa29fa79fa3d3533d30a035e3cfe21e197c3693aba8f73c4d5ac9c39102c985ca0dc6ba76",
            "file": "nestbackend/src/liabilities/dto/update-liability.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateLiabilityDto } from './create-liability.dto';\n\nexport class UpdateLiabilityDto extends PartialType(CreateLiabilityDto) {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateLoanDto",
            "id": "class-UpdateLoanDto-b719f1684467ede8011cbfa04ae90d7bd480524e2154eb450249ad6758655dcde8f9cbb71f9b79e2032368c0087dd89228f3a693270c0879c339bacdee5e240b",
            "file": "nestbackend/src/loans/dto/update-loan.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateLoanDto } from './create-loan.dto';\n\nexport class UpdateLoanDto extends PartialType(CreateLoanDto) {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateWishDto",
            "id": "class-UpdateWishDto-63acaee7040d46857e9bf91514b9375f8cfc6649f9a9054fef7ca66bc557c000d84d21ed115d5aab02542be1ec7068333730ada6c591e73beab3808845b03bcd",
            "file": "nestbackend/src/wishes/dto/update-wish.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateWishDto } from './create-wish.dto';\n\nexport class UpdateWishDto extends PartialType(CreateWishDto) {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Wish",
            "id": "class-Wish-b8cc9375f515bbe2a402fc1a6923c59114955c4f167dd0ec3be43b75c34378e62759384ca098218d3310e64581152f0de4968119e07662c24cb5ec328583a2b8",
            "file": "src/app/wish/wish.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Wish {\n}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Wish",
            "id": "class-Wish-d851741e1dc5b72cb5af1ca28ed6e4f64c1b0615e8ae55f9a99cd3a6b0820126b8928e4dc6ad8d27be30ffcfd5293c0b12529c8136baabf8e401af4e5173ca90-1",
            "file": "nestbackend/src/wishes/entities/wish.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Wish {}\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Wish-1"
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AccountComponent",
            "id": "component-AccountComponent-00d3bae53a2ee0f0155a97f497cb0949c27ed1fe83c1c2496e8381941450768f83c9bab7267f6e7e9ecc72b2d9585cd9de6e0230b9506339d22314e3d35eb002",
            "file": "src/app/accounts/account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account",
            "styleUrls": [
                "./account.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n})\nexport class AccountComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>account works!</p>\n"
        },
        {
            "name": "AccountComponent",
            "id": "component-AccountComponent-00d3bae53a2ee0f0155a97f497cb0949c27ed1fe83c1c2496e8381941450768f83c9bab7267f6e7e9ecc72b2d9585cd9de6e0230b9506339d22314e3d35eb002-1",
            "file": "src/app/institution/account.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account",
            "styleUrls": [
                "./account.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n})\nexport class AccountComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AccountComponent-1",
            "templateData": "<p>account works!</p>\n"
        },
        {
            "name": "AccountCreateComponent",
            "id": "component-AccountCreateComponent-6d1ad15b7af5fc79658566dfdc742340cad5277a4f5a71ec6b5f04a7ee64b41b26af5b914a2c8425948d052e989a9a4752153f5cf32019c2aaaf36862756576a",
            "file": "src/app/accounts/account-create/account-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-create",
            "styleUrls": [
                "./account-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "accountsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountsService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "enteredContent",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "enteredTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "imagePreview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mode",
                    "defaultValue": "'create'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImagePicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\n\nimport { AccountsService } from '../account.service';\nimport { Account } from '../account.model';\nimport { mimeType } from './mime-type.validator';\n\n@Component({\n  selector: 'app-account-create',\n  templateUrl: './account-create.component.html',\n  styleUrls: ['./account-create.component.css']\n})\nexport class AccountCreateComponent implements OnInit {\n  enteredTitle = '';\n  enteredContent = '';\n  account: Account;\n  isLoading = false;\n  form: FormGroup;\n  imagePreview: string;\n  private mode = 'create';\n  private accountId: string;\n\n  constructor(\n    public accountsService: AccountsService,\n    public route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      content: new FormControl(null, { validators: [Validators.required] }),\n      image: new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType]\n      }),\n      name: new FormControl(null),\n      description: new FormControl(null),\n      interest: new FormControl(null),\n      limit: new FormControl(null),\n      dueDate: new FormControl(null),\n      institution: new FormControl(null),\n      balance: new FormControl(null)\n    });\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\n      if (paramMap.has('accountId')) {\n        this.mode = 'edit';\n        this.accountId = paramMap.get('accountId');\n        this.isLoading = true;\n        this.accountsService.getAccount(this.accountId).subscribe(accountData => {\n          this.isLoading = false;\n          this.account = {\n            id: accountData._id,\n            title: accountData.title,\n            name: accountData.name,\n            description: accountData.description,\n            interest: accountData.interest,\n            limit: accountData.limit,\n            dueDate: accountData.dueDate,\n            institution: accountData.institution,\n            balance: accountData.balance,\n            content: accountData.content,\n            imagePath: accountData.imagePath\n          };\n          this.form.setValue({\n            title: this.account.title,\n            content: this.account.content,\n            name: this.account.name,\n            description: this.account.description,\n            interest: this.account.interest,\n            limit: this.account.limit,\n            dueDate: this.account.dueDate,\n            institution: this.account.institution,\n            balance: this.account.balance,\n            image: this.account.imagePath\n          });\n        });\n      } else {\n        this.mode = 'create';\n        this.accountId = null;\n      }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({ image: file });\n    this.form.get('image').updateValueAndValidity();\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  }\n\n  onSaveAccount() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    if (this.mode === 'create') {\n      this.accountsService.addAccount(\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.name,\n        this.form.value.description,\n        this.form.value.interest,\n        this.form.value.limit,\n        this.form.value.dueDate,\n        this.form.value.institution,\n        this.form.value.balance,\n        this.form.value.image\n      );\n    } else {\n      this.accountsService.updateAccount(\n        this.accountId,\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.name,\n        this.form.value.description,\n        this.form.value.interest,\n        this.form.value.limit,\n        this.form.value.dueDate,\n        this.form.value.institution,\n        this.form.value.balance,\n        this.form.value.image\n      );\n    }\n    this.form.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field,\r\ntextarea {\r\n  width: 100%;\r\n}\r\n\r\nmat-spinner {\r\n  margin: auto;\r\n}\r\n\r\ninput[type=\"file\"] {\r\n  visibility: hidden;\r\n}\r\n\r\n.image-preview {\r\n  height: 5rem;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.image-preview img {\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./account-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountsService",
                        "type": "AccountsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "accountsService",
                        "type": "AccountsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    <form [formGroup]=\"form\" (submit)=\"onSaveAccount()\" *ngIf=\"!isLoading\">\n      <mat-form-field>\n        <input matInput type=\"text\" formControlName=\"title\" placeholder=\"Account Title\">\n        <mat-error *ngIf=\"form.get('title').invalid\">Please enter a account title.</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"text\" matInput formControlName=\"name\" placeholder=\"name\">\n        <mat-error *ngIf=\"form.get('name').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"text\" matInput formControlName=\"description\" placeholder=\"description\">\n        <mat-error *ngIf=\"form.get('description').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"number\" matInput formControlName=\"interest\" placeholder=\"interest\">\n        <mat-error *ngIf=\"form.get('interest').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"number\" matInput formControlName=\"limit\" placeholder=\"limit\">\n        <mat-error *ngIf=\"form.get('limit').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"date\" matInput formControlName=\"dueDate\" placeholder=\"dueDate\">\n        <mat-error *ngIf=\"form.get('dueDate').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"text\" matInput formControlName=\"institution\" placeholder=\"institution\">\n        <mat-error *ngIf=\"form.get('institution').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"number\" matInput formControlName=\"balance\" placeholder=\"balance\">\n        <mat-error *ngIf=\"form.get('balance').invalid\"></mat-error>\n      </mat-form-field>\n      <div>\n        <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Pick Image</button>\n        <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\">\n      </div>\n      <div class=\"image-preview\" *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\">\n        <img [src]=\"imagePreview\" [alt]=\"form.value.title\">\n      </div>\n      <mat-form-field>\n        <textarea matInput rows=\"4\" formControlName=\"content\" placeholder=\"Account Content\"></textarea>\n        <mat-error *ngIf=\"form.get('content').invalid\">Please enter a account title.</mat-error>\n      </mat-form-field>\n      <button mat-raised-button color=\"accent\" type=\"submit\">Save Account</button>\n    </form>\n  </mat-card>\n"
        },
        {
            "name": "AccountCreateComponent",
            "id": "component-AccountCreateComponent-6d1ad15b7af5fc79658566dfdc742340cad5277a4f5a71ec6b5f04a7ee64b41b26af5b914a2c8425948d052e989a9a4752153f5cf32019c2aaaf36862756576a-1",
            "file": "src/app/institution/account-create/account-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-create",
            "styleUrls": [
                "./account-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "accountId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "accountsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountsService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "enteredContent",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "enteredTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "imagePreview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mode",
                    "defaultValue": "'create'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImagePicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\n\nimport { AccountsService } from '../account.service';\nimport { Account } from '../account.model';\nimport { mimeType } from './mime-type.validator';\n\n@Component({\n  selector: 'app-account-create',\n  templateUrl: './account-create.component.html',\n  styleUrls: ['./account-create.component.css']\n})\nexport class AccountCreateComponent implements OnInit {\n  enteredTitle = '';\n  enteredContent = '';\n  account: Account;\n  isLoading = false;\n  form: FormGroup;\n  imagePreview: string;\n  private mode = 'create';\n  private accountId: string;\n\n  constructor(\n    public accountsService: AccountsService,\n    public route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      content: new FormControl(null, { validators: [Validators.required] }),\n      image: new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType]\n      }),\n      name: new FormControl(null),\n      description: new FormControl(null),\n      interest: new FormControl(null),\n      limit: new FormControl(null),\n      dueDate: new FormControl(null),\n      institution: new FormControl(null),\n      balance: new FormControl(null)\n    });\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\n      if (paramMap.has('accountId')) {\n        this.mode = 'edit';\n        this.accountId = paramMap.get('accountId');\n        this.isLoading = true;\n        this.accountsService.getAccount(this.accountId).subscribe(accountData => {\n          this.isLoading = false;\n          this.account = {\n            id: accountData._id,\n            title: accountData.title,\n            name: accountData.name,\n            description: accountData.description,\n            interest: accountData.interest,\n            limit: accountData.limit,\n            dueDate: accountData.dueDate,\n            institution: accountData.institution,\n            balance: accountData.balance,\n            content: accountData.content,\n            imagePath: accountData.imagePath\n          };\n          this.form.setValue({\n            title: this.account.title,\n            content: this.account.content,\n            name: this.account.name,\n            description: this.account.description,\n            interest: this.account.interest,\n            limit: this.account.limit,\n            dueDate: this.account.dueDate,\n            institution: this.account.institution,\n            balance: this.account.balance,\n            image: this.account.imagePath\n          });\n        });\n      } else {\n        this.mode = 'create';\n        this.accountId = null;\n      }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({ image: file });\n    this.form.get('image').updateValueAndValidity();\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  }\n\n  onSaveAccount() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    if (this.mode === 'create') {\n      this.accountsService.addAccount(\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.name,\n        this.form.value.description,\n        this.form.value.interest,\n        this.form.value.limit,\n        this.form.value.dueDate,\n        this.form.value.institution,\n        this.form.value.balance,\n        this.form.value.image\n      );\n    } else {\n      this.accountsService.updateAccount(\n        this.accountId,\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.name,\n        this.form.value.description,\n        this.form.value.interest,\n        this.form.value.limit,\n        this.form.value.dueDate,\n        this.form.value.institution,\n        this.form.value.balance,\n        this.form.value.image\n      );\n    }\n    this.form.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field,\r\ntextarea {\r\n  width: 100%;\r\n}\r\n\r\nmat-spinner {\r\n  margin: auto;\r\n}\r\n\r\ninput[type=\"file\"] {\r\n  visibility: hidden;\r\n}\r\n\r\n.image-preview {\r\n  height: 5rem;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.image-preview img {\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./account-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountsService",
                        "type": "AccountsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "accountsService",
                        "type": "AccountsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AccountCreateComponent-1",
            "templateData": "<mat-card>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    <form [formGroup]=\"form\" (submit)=\"onSaveAccount()\" *ngIf=\"!isLoading\">\n      <mat-form-field>\n        <input matInput type=\"text\" formControlName=\"title\" placeholder=\"Account Title\">\n        <mat-error *ngIf=\"form.get('title').invalid\">Please enter a account title.</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"text\" matInput formControlName=\"name\" placeholder=\"name\">\n        <mat-error *ngIf=\"form.get('name').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"text\" matInput formControlName=\"description\" placeholder=\"description\">\n        <mat-error *ngIf=\"form.get('description').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"number\" matInput formControlName=\"interest\" placeholder=\"interest\">\n        <mat-error *ngIf=\"form.get('interest').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"number\" matInput formControlName=\"limit\" placeholder=\"limit\">\n        <mat-error *ngIf=\"form.get('limit').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"date\" matInput formControlName=\"dueDate\" placeholder=\"dueDate\">\n        <mat-error *ngIf=\"form.get('dueDate').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"text\" matInput formControlName=\"institution\" placeholder=\"institution\">\n        <mat-error *ngIf=\"form.get('institution').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"number\" matInput formControlName=\"balance\" placeholder=\"balance\">\n        <mat-error *ngIf=\"form.get('balance').invalid\"></mat-error>\n      </mat-form-field>\n      <div>\n        <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Pick Image</button>\n        <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\">\n      </div>\n      <div class=\"image-preview\" *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\">\n        <img [src]=\"imagePreview\" [alt]=\"form.value.title\">\n      </div>\n      <mat-form-field>\n        <textarea matInput rows=\"4\" formControlName=\"content\" placeholder=\"Account Content\"></textarea>\n        <mat-error *ngIf=\"form.get('content').invalid\">Please enter a account title.</mat-error>\n      </mat-form-field>\n      <button mat-raised-button color=\"accent\" type=\"submit\">Save Account</button>\n    </form>\n  </mat-card>\n"
        },
        {
            "name": "AccountListComponent",
            "id": "component-AccountListComponent-f64daa71281c43c407613a2d4d282d53473ba44aa0dcbf15f5db115a1eb40049884a3baa617bd9e7fc5eeea5b59bdd6e7b05625c2b326a0308de0b2558a7a75d",
            "file": "src/app/accounts/account-list/account-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-list",
            "styleUrls": [
                "./account-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "accountsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountsService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "accountsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Account } from '../account.model';\nimport { AccountsService } from '../account.service';\n\n@Component({\n  selector: 'app-account-list',\n  templateUrl: './account-list.component.html',\n  styleUrls: ['./account-list.component.css']\n})\nexport class AccountListComponent implements OnInit, OnDestroy {\n  // accounts = [\n  //   { title: \"First Account\", content: \"This is the first account's content\" },\n  //   { title: \"Second Account\", content: \"This is the second account's content\" },\n  //   { title: \"Third Account\", content: \"This is the third account's content\" }\n  // ];\n  accounts: Account[] = [];\n  isLoading = false;\n  private accountsSub: Subscription;\n\n  constructor(public accountsService: AccountsService) { }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.accountsService.getAccounts();\n    this.accountsSub = this.accountsService.getAccountUpdateListener()\n      .subscribe((accounts: Account[]) => {\n        this.isLoading = false;\n        this.accounts = accounts;\n      });\n  }\n\n  onDelete(accountId: string) {\n    this.accountsService.deleteAccount(accountId);\n  }\n\n  ngOnDestroy() {\n    this.accountsSub.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  margin-top: 1rem;\r\n}\r\n\r\nmat-spinner {\r\n  margin: auto;\r\n}\r\n\r\n.info-text {\r\n  text-align: center;\r\n}\r\n\r\n.account-image {\r\n  width: 100%;\r\n}\r\n\r\n.account-image img {\r\n  width: 50%;\r\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);\r\n}\r\n",
                    "styleUrl": "./account-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountsService",
                        "type": "AccountsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "accountsService",
                        "type": "AccountsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf=\"accounts.length > 0 && !isLoading\">\n  <mat-expansion-panel *ngFor=\"let account of accounts\">\n    <mat-expansion-panel-header>\n      {{ account.title }}\n    </mat-expansion-panel-header>\n    <div class=\"account-image\">\n      <img [src]=\"account.imagePath\" [alt]=\"account.title\">\n    </div>\n    <p>name is {{ account.name }}</p>\n    <p>description is {{ account.description }}</p>\n    <p>interest is {{ account.interest }}</p>\n    <p>limit is {{ account.limit }}</p>\n    <p>institution is {{ account.institution}}</p>\n    <p>balance is {{ account.balance}}</p>\n    <mat-action-row>\n      <a mat-button color=\"primary\" [routerLink]=\"['/account/edit', account.id]\">EDIT</a>\n      <button mat-button color=\"warn\" (click)=\"onDelete(account.id)\">DELETE</button>\n    </mat-action-row>\n  </mat-expansion-panel>\n</mat-accordion>\n<p class=\"info-text mat-body-1\" *ngIf=\"accounts.length <= 0 && !isLoading\">No accounts added yet!</p>\n"
        },
        {
            "name": "AccountListComponent",
            "id": "component-AccountListComponent-f64daa71281c43c407613a2d4d282d53473ba44aa0dcbf15f5db115a1eb40049884a3baa617bd9e7fc5eeea5b59bdd6e7b05625c2b326a0308de0b2558a7a75d-1",
            "file": "src/app/institution/account-list/account-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-list",
            "styleUrls": [
                "./account-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accounts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Account[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "accountsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AccountsService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "accountsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accountId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Account } from '../account.model';\nimport { AccountsService } from '../account.service';\n\n@Component({\n  selector: 'app-account-list',\n  templateUrl: './account-list.component.html',\n  styleUrls: ['./account-list.component.css']\n})\nexport class AccountListComponent implements OnInit, OnDestroy {\n  // accounts = [\n  //   { title: \"First Account\", content: \"This is the first account's content\" },\n  //   { title: \"Second Account\", content: \"This is the second account's content\" },\n  //   { title: \"Third Account\", content: \"This is the third account's content\" }\n  // ];\n  accounts: Account[] = [];\n  isLoading = false;\n  private accountsSub: Subscription;\n\n  constructor(public accountsService: AccountsService) { }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.accountsService.getAccounts();\n    this.accountsSub = this.accountsService.getAccountUpdateListener()\n      .subscribe((accounts: Account[]) => {\n        this.isLoading = false;\n        this.accounts = accounts;\n      });\n  }\n\n  onDelete(accountId: string) {\n    this.accountsService.deleteAccount(accountId);\n  }\n\n  ngOnDestroy() {\n    this.accountsSub.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  margin-top: 1rem;\r\n}\r\n\r\nmat-spinner {\r\n  margin: auto;\r\n}\r\n\r\n.info-text {\r\n  text-align: center;\r\n}\r\n\r\n.account-image {\r\n  width: 100%;\r\n}\r\n\r\n.account-image img {\r\n  width: 50%;\r\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);\r\n}\r\n",
                    "styleUrl": "./account-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "accountsService",
                        "type": "AccountsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "accountsService",
                        "type": "AccountsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AccountListComponent-1",
            "templateData": "<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf=\"accounts.length > 0 && !isLoading\">\n  <mat-expansion-panel *ngFor=\"let account of accounts\">\n    <mat-expansion-panel-header>\n      {{ account.title }}\n    </mat-expansion-panel-header>\n    <div class=\"account-image\">\n      <img [src]=\"account.imagePath\" [alt]=\"account.title\">\n    </div>\n    <p>name is {{ account.name }}</p>\n    <p>description is {{ account.description }}</p>\n    <p>interest is {{ account.interest }}</p>\n    <p>limit is {{ account.limit }}</p>\n    <p>institution is {{ account.institution}}</p>\n    <p>balance is {{ account.balance}}</p>\n    <mat-action-row>\n      <a mat-button color=\"primary\" [routerLink]=\"['/account/edit', account.id]\">EDIT</a>\n      <button mat-button color=\"warn\" (click)=\"onDelete(account.id)\">DELETE</button>\n    </mat-action-row>\n  </mat-expansion-panel>\n</mat-accordion>\n<p class=\"info-text mat-body-1\" *ngIf=\"accounts.length <= 0 && !isLoading\">No accounts added yet!</p>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-7a0fb2efc9e00e84c100b63176da6942d6dfaa3f7eced7fa36afb350fa1c27f095d4d376a2a3ea1f937817b42cf65fe79589b074f59f723e52ded38be6c9df2e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "main {\n  width: 80%;\n  margin: 1rem auto;\n}\n\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header></app-header>\n<main>\n  <router-outlet></router-outlet>\n</main>\n"
        },
        {
            "name": "BarChartComponent",
            "id": "component-BarChartComponent-043d9a6896a0e3d247d89f1f16125ca1514e2f1a3315df8280aef43be28313d3970fd196e039e6b380dc703b79d38ebdc612c5f0ef20a9978d52a8105b333dd2",
            "file": "src/app/charts/bar-chart/bar-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bar-chart",
            "styleUrls": [
                "./bar-chart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./bar-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bar-chart',\n  templateUrl: './bar-chart.component.html',\n  styleUrls: ['./bar-chart.component.css']\n})\nexport class BarChartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./bar-chart.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"chart-wrapper\">\n    <canvas baseChart \n        [datasets]=\"lineChartData\" \n        [labels]=\"lineChartLabels\" \n        [options]=\"lineChartOptions\"\n        [colors]=\"lineChartColors\" \n        [legend]=\"lineChartLegend\" \n        [chartType]=\"lineChartType\" \n        [plugins]=\"lineChartPlugins\">\n    </canvas>\n</div>"
        },
        {
            "name": "BillComponent",
            "id": "component-BillComponent-e1924cac5b6de14f5f0cbf6a8a3251cfa1397e8e6609d7e5a7878e8cb63dde38e2a6763b7b41747b00bce381d1dc0ec952e55d70118170fa49fd8c90820fd52d",
            "file": "src/app/bills/bill.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bill",
            "styleUrls": [
                "./bill.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./bill.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bill',\n  templateUrl: './bill.component.html',\n  styleUrls: ['./bill.component.css']\n})\nexport class BillComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./bill.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>bill works!</p>\n"
        },
        {
            "name": "BillCreateComponent",
            "id": "component-BillCreateComponent-022c4a789365e3ab741b37aa503822a740193cbfeb95ef9f4fefe6a38a0e2dd214954f9abd822118dba41f04ee4fc3c77c9f58fdfee7538c98131ebce04e6524",
            "file": "src/app/bills/bill-create/bill-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bill-create",
            "styleUrls": [
                "./bill-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./bill-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bill",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Bill",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "billId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "billsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BillsService",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "[\n    \"Investments\",\n    \"Bill & Utilities\",\n    \"Fee & Charges\",\n    \"Business Services\",\n    \"Alcohol\",\n    \"Food & Dining\",\n    \"Service & Parts\",\n    \"Auto & Transport\",\n    \"Motorcycle\",\n    \"Insurance\",\n    \"Education\",\n    \"Health & Fitness\",\n    \"Entertainment\",\n    \"Shopping\",\n    \"Rent\",\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "frequencies",
                    "defaultValue": "[\n    \"daily\",\n    \"biweekly\",\n    \"monthly\",\n    \"quarterly\",\n    \"biannaul\",\n    \"annual\",\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "imagePreview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mode",
                    "defaultValue": "\"create\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "paymentMethods",
                    "defaultValue": "[\"Amex\", \"Visa\", \"Mastercard\", \"Cash\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImagePicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveBill",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ActivatedRoute, ParamMap } from \"@angular/router\";\nimport { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { Bill } from \"../bill.model\";\nimport { BillsService } from \"../bill.service\";\nimport { mimeType } from \"./mime-type.validator\";\n\n@Component({\n  selector: \"app-bill-create\",\n  templateUrl: \"./bill-create.component.html\",\n  styleUrls: [\"./bill-create.component.css\"],\n})\nexport class BillCreateComponent implements OnInit {\n  bill: Bill;\n  isLoading = false;\n  form: FormGroup;\n  imagePreview: string;\n  private mode = \"create\";\n  private billId: string;\n  categories = [\n    \"Investments\",\n    \"Bill & Utilities\",\n    \"Fee & Charges\",\n    \"Business Services\",\n    \"Alcohol\",\n    \"Food & Dining\",\n    \"Service & Parts\",\n    \"Auto & Transport\",\n    \"Motorcycle\",\n    \"Insurance\",\n    \"Education\",\n    \"Health & Fitness\",\n    \"Entertainment\",\n    \"Shopping\",\n    \"Rent\",\n  ];\n  frequencies = [\n    \"daily\",\n    \"biweekly\",\n    \"monthly\",\n    \"quarterly\",\n    \"biannaul\",\n    \"annual\",\n  ];\n  paymentMethods = [\"Amex\", \"Visa\", \"Mastercard\", \"Cash\"];\n  constructor(\n    public billsService: BillsService,\n    public route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)],\n      }),\n      amount: new FormControl(null),\n      description: new FormControl(null),\n      institution: new FormControl(null),\n      category: new FormControl(null),\n      frequency: new FormControl(null),\n      dueDate: new FormControl(null),\n      paymentMethod: new FormControl(null),\n      image: new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType],\n      }),\n    });\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\n      if (paramMap.has(\"billId\")) {\n        this.mode = \"edit\";\n        this.billId = paramMap.get(\"billId\");\n        this.isLoading = true;\n        this.billsService.getBill(this.billId).subscribe((billData) => {\n          this.isLoading = false;\n          this.bill = {\n            id: billData._id,\n            title: billData.title,\n            amount: billData.amount,\n            description: billData.description,\n            institution: billData.institution,\n            category: billData.category,\n            frequency: billData.frequency,\n            dueDate: billData.dueDate,\n            paymentMethod: billData.paymentMethod,\n            imagePath: billData.imagePath,\n          };\n          this.form.setValue({\n            title: this.bill.title,\n            amount: this.bill.amount,\n            description: this.bill.description,\n            institution: this.bill.institution,\n            category: this.bill.category,\n            frequency: this.bill.frequency,\n            dueDate: this.bill.dueDate,\n            paymentMethod: this.bill.paymentMethod,\n            image: this.bill.imagePath,\n          });\n        });\n      } else {\n        this.mode = \"create\";\n        this.billId = null;\n      }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({ image: file });\n    this.form.get(\"image\").updateValueAndValidity();\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  }\n\n  onSaveBill() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    if (this.mode === \"create\") {\n      this.billsService.addBill(\n        this.form.value.title,\n        this.form.value.amount,\n        this.form.value.description,\n        this.form.value.institution,\n        this.form.value.category,\n        this.form.value.frequency,\n        this.form.value.dueDate,\n        this.form.value.paymentMethod,\n        this.form.value.image\n      );\n    } else {\n      this.billsService.updateBill(\n        this.billId,\n        this.form.value.title,\n        this.form.value.amount,\n        this.form.value.description,\n        this.form.value.institution,\n        this.form.value.category,\n        this.form.value.frequency,\n        this.form.value.dueDate,\n        this.form.value.paymentMethod,\n        this.form.value.image\n      );\n    }\n    this.form.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field,\r\ntextarea {\r\n  width: 100%;\r\n}\r\n\r\nmat-spinner {\r\n  margin: auto;\r\n}\r\n\r\ninput[type=\"file\"] {\r\n  visibility: hidden;\r\n}\r\n\r\n.image-preview {\r\n  height: 5rem;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.image-preview img {\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./bill-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "billsService",
                        "type": "BillsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "billsService",
                        "type": "BillsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form [formGroup]=\"form\" (submit)=\"onSaveBill()\" *ngIf=\"!isLoading\">\n    <!-- Bill Title -->\n    <mat-form-field>\n      <input matInput type=\"text\" formControlName=\"title\" placeholder=\"Bill Title\">\n      <mat-error *ngIf=\"form.get('title').invalid\">Please enter a bill title.</mat-error>\n    </mat-form-field>\n    <!-- Amount -->\n    <mat-form-field>\n      <input type=\"number\" matInput placeholder=\"Amount\" formControlName=\"amount\">\n    </mat-form-field>\n    <!-- Service Description -->\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Service Description\" formControlName=\"description\">\n    </mat-form-field>\n    <!-- Institution -->\n    <mat-form-field>\n      <input type=\"text\" matInput placeholder=\"Institution\" formControlName=\"institution\">\n    </mat-form-field>\n    <!-- Category -->\n    <mat-form-field>\n      <mat-select placeholder=\"Category\" formControlName=\"category\">\n        <mat-option *ngFor=\"let category of categories\" [value]=\"category\">\n          {{category}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <!-- Frequency -->\n    <mat-form-field>\n      <mat-select placeholder=\"Frequency\" formControlName=\"frequency\">\n        <mat-option *ngFor=\"let frequency of frequencies\" [value]=\"frequency\">\n          {{frequency}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <!-- Due Date -->\n    <mat-form-field>\n      <input type=\"date\" matInput formControlName=\"dueDate\" placeholder=\"Due Date\" formControlName=\"dueDate\">\n      <mat-error *ngIf=\"form.get('dueDate').invalid\"></mat-error>\n    </mat-form-field>\n    <!-- Payment Method -->\n    <mat-form-field>\n      <mat-select placeholder=\"Payment Method\" formControlName=\"paymentMethod\">\n        <mat-option *ngFor=\"let paymentMethod of paymentMethods\" [value]=\"paymentMethod\">\n          {{paymentMethod}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <!-- Logo -->\n    <div>\n      <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Pick Image</button>\n      <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\">\n    </div>\n    <div class=\"image-preview\" *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\">\n      <img [src]=\"imagePreview\" [alt]=\"form.value.title\">\n    </div>\n    <button mat-raised-button color=\"accent\" type=\"submit\">Save Bill</button>\n  </form>\n</mat-card>\n"
        },
        {
            "name": "BillListComponent",
            "id": "component-BillListComponent-9daf54d6520fe4febaaa4966f615ce88fec45c6be2559653f0cda0a9b6a5461ea34846ee7d8e09be6bef0ad4e8aeafe0d9c2154bd33c049bf597ee142ebde823",
            "file": "src/app/bills/bill-list/bill-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bill-list",
            "styleUrls": [
                "./bill-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./bill-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bills",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Bill[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "billsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BillsService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "billsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "billId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "billId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from \"@angular/core\";\n\nimport { Bill } from \"../bill.model\";\nimport { BillsService } from \"../bill.service\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: \"app-bill-list\",\n  templateUrl: \"./bill-list.component.html\",\n  styleUrls: [\"./bill-list.component.css\"],\n})\nexport class BillListComponent implements OnInit, OnDestroy {\n  // bills = [\n  //   { title: \"First Bill\", content: \"This is the first bill's content\" },\n  //   { title: \"Second Bill\", content: \"This is the second bill's content\" },\n  //   { title: \"Third Bill\", content: \"This is the third bill's content\" }\n  // ];\n  bills: Bill[] = [];\n  isLoading = false;\n  private billsSub: Subscription;\n\n  constructor(public billsService: BillsService) {}\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.billsService.getBills();\n    this.billsSub = this.billsService\n      .getBillUpdateListener()\n      .subscribe((bills: Bill[]) => {\n        this.isLoading = false;\n        this.bills = bills;\n      });\n  }\n\n  onDelete(billId: string) {\n    this.billsService.deleteBill(billId);\n  }\n\n  ngOnDestroy() {\n    this.billsSub.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  margin-top: 1rem;\r\n}\r\n\r\nmat-spinner {\r\n  margin: auto;\r\n}\r\n\r\n.info-text {\r\n  text-align: center;\r\n}\r\n\r\n.bill-image {\r\n  float: left;\r\n  width: 20%;\r\n  margin-right: 1em;\r\n}\r\n\r\n.bill-image img {\r\n  width: 10%;\r\n}\r\n\r\nmat-card {\r\n  margin: 1em 0 1em 0;\r\n}\r\n",
                    "styleUrl": "./bill-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "billsService",
                        "type": "BillsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "billsService",
                        "type": "BillsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf=\"bills.length > 0 && !isLoading\">\n  <mat-expansion-panel *ngFor=\"let bill of bills\">\n    <mat-expansion-panel-header>\n      {{ bill.title }}\n    </mat-expansion-panel-header>\n    <span>\n      <img [src]=\"bill.imagePath\" [alt]=\"bill.title\" class=\"bill-image\">\n    </span>\n    <span>\n      <h3>\n        {{bill.amount | currency}} is due on {{ bill.dueDate | date : 'fullDate'}} to {{bill.institution}}\n      </h3>\n      {{ bill.description }}\n    </span>\n    <mat-action-row>\n      <a mat-button color=\"primary\" [routerLink]=\"['/bill/edit', bill.id]\">EDIT</a>\n      <button mat-button color=\"warn\" (click)=\"onDelete(bill.id)\">DELETE</button>\n    </mat-action-row>\n  </mat-expansion-panel>\n</mat-accordion>\n<p class=\"info-text mat-body-1\" *ngIf=\"bills.length <= 0 && !isLoading\">No bills added yet!</p>\n"
        },
        {
            "name": "BubbleChartComponent",
            "id": "component-BubbleChartComponent-1d5ad631a56b20972824d3c0d1c240959ff03c4e0c3b15e8dbd2c1f93ec535107a20b173bae5fefbd990c915c476a3039f1a4e429ab71932c500a25c77dc5609",
            "file": "src/app/charts/bubble-chart/bubble-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bubble-chart",
            "styleUrls": [
                "./bubble-chart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./bubble-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bubble-chart',\n  templateUrl: './bubble-chart.component.html',\n  styleUrls: ['./bubble-chart.component.css']\n})\nexport class BubbleChartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./bubble-chart.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>bubble-chart works!</p>\n"
        },
        {
            "name": "BudgetComponent",
            "id": "component-BudgetComponent-038e91498aa2393689410d88a49b49744696a99bf3e090a420ab179c9c5c7bd75f95786b757ac2f74b22a6545eb2545d626ee66594bcbf0f39bdf04dbd52c89c",
            "file": "src/app/budget/budget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-budget",
            "styleUrls": [
                "./budget.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./budget.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"app-budget\",\n  templateUrl: \"./budget.component.html\",\n  styleUrls: [\"./budget.component.css\"],\n})\nexport class BudgetComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./budget.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>budget works!</p>\n"
        },
        {
            "name": "BudgetCreateComponent",
            "id": "component-BudgetCreateComponent-1c1cf4503f93c6a77f781e29c6208ee5bbb7845e8513164364f299d93892b9f81196446f086b595dffffd2349fe1bab1239ccf6801c8bbbb3cbb1b3d7c011349",
            "file": "src/app/budget/budget-create/budget-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-budget-create",
            "styleUrls": [
                "./budget-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./budget-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "budget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Budget",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "budgetId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "budgetsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BudgetsService",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "[\n    \"Investments\",\n    \"Budget & Utilities\",\n    \"Fee & Charges\",\n    \"Business Services\",\n    \"Alcohol\",\n    \"Food & Dining\",\n    \"Service & Parts\",\n    \"Auto & Transport\",\n    \"Motorcycle\",\n    \"Insurance\",\n    \"Education\",\n    \"Health & Fitness\",\n    \"Entertainment\",\n    \"Shopping\",\n    \"Rent\",\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "frequencies",
                    "defaultValue": "[\n    \"daily\",\n    \"biweekly\",\n    \"monthly\",\n    \"quarterly\",\n    \"biannaul\",\n    \"annual\",\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "imagePreview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mode",
                    "defaultValue": "\"create\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "paymentMethods",
                    "defaultValue": "[\"Amex\", \"Visa\", \"Mastercard\", \"Cash\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveBudget",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ActivatedRoute, ParamMap } from \"@angular/router\";\nimport { Component, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { Budget } from \"../budget.model\";\nimport { BudgetsService } from \"../budget.service\";\nimport { mimeType } from \"./mime-type.validator\";\n\n@Component({\n  selector: \"app-budget-create\",\n  templateUrl: \"./budget-create.component.html\",\n  styleUrls: [\"./budget-create.component.css\"],\n})\nexport class BudgetCreateComponent implements OnInit {\n  budget: Budget;\n  isLoading = false;\n  form: FormGroup;\n  imagePreview: string;\n  private mode = \"create\";\n  private budgetId: string;\n  categories = [\n    \"Investments\",\n    \"Budget & Utilities\",\n    \"Fee & Charges\",\n    \"Business Services\",\n    \"Alcohol\",\n    \"Food & Dining\",\n    \"Service & Parts\",\n    \"Auto & Transport\",\n    \"Motorcycle\",\n    \"Insurance\",\n    \"Education\",\n    \"Health & Fitness\",\n    \"Entertainment\",\n    \"Shopping\",\n    \"Rent\",\n  ];\n  frequencies = [\n    \"daily\",\n    \"biweekly\",\n    \"monthly\",\n    \"quarterly\",\n    \"biannaul\",\n    \"annual\",\n  ];\n  paymentMethods = [\"Amex\", \"Visa\", \"Mastercard\", \"Cash\"];\n  constructor(\n    public budgetsService: BudgetsService,\n    public route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      budgetItem: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)],\n      }),\n      budgetCategory: new FormControl(null),\n      percentage: new FormControl(null),\n      percentageCategory: new FormControl(null),\n      exemptFromRecalculation: new FormControl(null),\n      fixedPriceValue: new FormControl(null),\n      contribution: new FormControl(null),\n    });\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\n      if (paramMap.has(\"budgetId\")) {\n        this.mode = \"edit\";\n        this.budgetId = paramMap.get(\"budgetId\");\n        this.isLoading = true;\n        this.budgetsService.getBudget(this.budgetId).subscribe((budgetData) => {\n          this.isLoading = false;\n          this.budget = {\n            _id: this.budgetId,\n            budgetItem: budgetData.budgetItem,\n            budgetCategory: budgetData.budgetCategory,\n            percentage: budgetData.percentage,\n            percentageCategory: budgetData.percentageCategory,\n            exemptFromRecalculation: budgetData.exemptFromRecalculation,\n            fixedPriceValue: budgetData.fixedPriceValue,\n            contribution: budgetData.contribution,\n          };\n          this.form.setValue({\n            budgetItem: this.budget.budgetItem,\n            budgetCategory: this.budget.budgetCategory,\n            percentage: this.budget.percentage,\n            percentageCategory: this.budget.percentageCategory,\n            exemptFromRecalculation: this.budget.exemptFromRecalculation,\n            fixedPriceValue: this.budget.fixedPriceValue,\n            contribution: this.budget.contribution,\n          });\n        });\n      } else {\n        this.mode = \"create\";\n        this.budgetId = null;\n      }\n    });\n  }\n\n  onSaveBudget() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    if (this.mode === \"create\") {\n      this.budgetsService.addBudget(\n        this.form.value.budgetItem,\n        this.form.value.budgetCategory,\n        this.form.value.percentage,\n        this.form.value.percentageCategory,\n        this.form.value.exemptFromRecalculation,\n        this.form.value.fixedPriceValue,\n        this.form.value.contribution\n      );\n    } else {\n      this.budgetsService.updateBudget(\n        this.budgetId,\n        this.form.value.budgetItem,\n        this.form.value.budgetCategory,\n        this.form.value.percentage,\n        this.form.value.percentageCategory,\n        this.form.value.exemptFromRecalculation,\n        this.form.value.fixedPriceValue,\n        this.form.value.contribution\n      );\n    }\n    this.form.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field,\r\ntextarea {\r\n  width: 100%;\r\n}\r\n\r\nmat-spinner {\r\n  margin: auto;\r\n}\r\n\r\ninput[type=\"file\"] {\r\n  visibility: hidden;\r\n}\r\n\r\n.image-preview {\r\n  height: 5rem;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.image-preview img {\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./budget-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "budgetsService",
                        "type": "BudgetsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "budgetsService",
                        "type": "BudgetsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form [formGroup]=\"form\" (submit)=\"onSaveBudget()\" *ngIf=\"!isLoading\">\n    <!-- Budget Name -->\n    <mat-form-field>\n      <input matInput type=\"text\" formControlName=\"budgetItem\" placeholder=\"Budget Name\">\n      <mat-error *ngIf=\"form.get('budgetItem').invalid\">Please enter a budget name.</mat-error>\n    </mat-form-field>\n    <!-- Budget Category -->\n    <mat-form-field>\n      <mat-select type=\"text\" formControlName=\"budgetCategory\" placeholder=\" Budget Category\">\n        <mat-option *ngFor=\"let category of categories\" [value]=\"category\">{{category}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n    <!-- Percentage -->\n    <mat-form-field>\n      <input matInput type=\"number\" formControlName=\"percentage\" placeholder=\"Percentage\">\n      <span matSuffix>%</span>\n      <mat-error *ngIf=\"form.get('percentage').invalid\">Please enter a percentage</mat-error>\n    </mat-form-field>\n    <!-- Percentage Category -->\n    <mat-form-field>\n      <input matInput type=\"number\" formControlName=\"percentageCategory\" placeholder=\"Percentage Category \">\n      <span matSuffix>%</span>\n      <mat-error *ngIf=\"form.get('percentageCategory').invalid\">Please enter a percentage of the category</mat-error>\n    </mat-form-field>\n    <!-- Exempt From Recalculation -->\n    <mat-checkbox formControlName=\"exemptFromRecalculation\">Exempt From Recalculation</mat-checkbox>\n    <!-- Fixed Price -->\n    <mat-form-field>\n      <input matInput type=\"number\" formControlName=\"fixedPriceValue\" placeholder=\"Fixed Price\">\n      <span matSuffix>.00</span>\n      <span matPrefix>$</span>\n      <mat-error *ngIf=\"form.get('fixedPriceValue').invalid\">Please enter a fixed price</mat-error>\n    </mat-form-field>\n    <!-- Contribution -->\n    <mat-form-field>\n      <input matInput type=\"number\" formControlName=\"contribution\" placeholder=\"Contribution\">\n      <span matSuffix>.00</span>\n      <span matPrefix>$</span>\n      <mat-error *ngIf=\"form.get('contribution').invalid\">Please enter a budget name.</mat-error>\n    </mat-form-field>\n    <button mat-raised-button color=\"accent\" type=\"submit\">Save Budget</button>\n  </form>\n</mat-card>\n"
        },
        {
            "name": "BudgetListComponent",
            "id": "component-BudgetListComponent-62a9285ef7ac373938c040113caa8ecec7be5ba553d192a40bfd739e5756c8e4f231d61ce3646445b85dc1886cb6b583a9cb233c8e36a30e1fe46bec104261ad",
            "file": "src/app/budget/budget-list/budget-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-budget-list",
            "styleUrls": [
                "./budget-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./budget-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "budgets",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Budget[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "budgetsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BudgetsService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "budgetsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "budgetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "budgetId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from \"@angular/core\";\n\nimport { Budget } from \"../budget.model\";\nimport { BudgetsService } from \"../budget.service\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: \"app-budget-list\",\n  templateUrl: \"./budget-list.component.html\",\n  styleUrls: [\"./budget-list.component.css\"],\n})\nexport class BudgetListComponent implements OnInit, OnDestroy {\n  // budgets = [\n  //   { title: \"First Budget\", content: \"This is the first budget's content\" },\n  //   { title: \"Second Budget\", content: \"This is the second budget's content\" },\n  //   { title: \"Third Budget\", content: \"This is the third budget's content\" }\n  // ];\n  budgets: Budget[] = [];\n  isLoading = false;\n  private budgetsSub: Subscription;\n\n  constructor(public budgetsService: BudgetsService) {}\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.budgetsService.getBudgets();\n    this.budgetsSub = this.budgetsService\n      .getBudgetUpdateListener()\n      .subscribe((budgets: Budget[]) => {\n        this.isLoading = false;\n        this.budgets = budgets;\n      });\n  }\n\n  onDelete(budgetId: string) {\n    this.budgetsService.deleteBudget(budgetId);\n  }\n\n  ngOnDestroy() {\n    this.budgetsSub.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./budget-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "budgetsService",
                        "type": "BudgetsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "budgetsService",
                        "type": "BudgetsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf=\"budgets.length > 0 && !isLoading\">\n  <mat-expansion-panel *ngFor=\"let budget of budgets\">\n    <mat-expansion-panel-header>\n      {{ budget.budgetItem }}\n    </mat-expansion-panel-header>\n    <span>\n      <ul>\n        <li>{{budget.budgetItem}}</li>\n        <li>{{budget.budgetCategory}}</li>\n        <li>{{budget.contribution | currency:'CAD'}}</li>\n        <li>{{budget.exemptFromRecalculation}}</li>\n        <li>{{budget.fixedPriceValue | currency:'CAD'}}</li>\n        <li>{{budget._id}}</li>\n        <li>{{budget.percentage |  percent}}</li>\n        <li>{{budget.percentageCategory | percent}}</li>\n      </ul>\n    </span>\n    <mat-action-row>\n      <a mat-button color=\"primary\" [routerLink]=\"['/budgets/edit', budget._id]\">EDIT</a>\n      <button mat-button color=\"warn\" (click)=\"onDelete(budget._id)\">DELETE</button>\n    </mat-action-row>\n  </mat-expansion-panel>\n</mat-accordion>\n<p class=\"info-text mat-body-1\" *ngIf=\"budgets.length <= 0 && !isLoading\">No budgets added yet!</p>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-de0acda18708dbb95b425f951e550fe361270c27ccc0a04e9b437e4844759ab129f0fc74a54b733db701a84c2ccc7c8befb4e4eadc580b32ac747068c5683b5b",
            "file": "src/app/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.css']\n})\nexport class CardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>card works!</p>\n"
        },
        {
            "name": "CardCreateComponent",
            "id": "component-CardCreateComponent-172c7b6261cfdf187050e40ca371fa2c01041f148675ed3041f78bc92dcd8c12e8f4ac9b0023261adc6270251d8a703fbcf1d4df1e9aee55b6502a1346e20495",
            "file": "src/app/card/card-create/card-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-create",
            "styleUrls": [
                "./card-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "cardId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cardsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardsService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "enteredContent",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "enteredTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "imagePreview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mode",
                    "defaultValue": "'create'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImagePicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSaveCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\n\nimport { CardsService } from '../card.service';\nimport { Card } from '../card.model';\nimport { mimeType } from './mime-type.validator';\n\n@Component({\n  selector: 'app-card-create',\n  templateUrl: './card-create.component.html',\n  styleUrls: ['./card-create.component.css']\n})\nexport class CardCreateComponent implements OnInit {\n  enteredTitle = '';\n  enteredContent = '';\n  card: Card;\n  isLoading = false;\n  form: FormGroup;\n  imagePreview: string;\n  private mode = 'create';\n  private cardId: string;\n\n  constructor(\n    public cardsService: CardsService,\n    public route: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      content: new FormControl(null, { validators: [Validators.required] }),\n      image: new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType]\n      }),\n      name: new FormControl(null),\n      description: new FormControl(null),\n      interest: new FormControl(null),\n      limit: new FormControl(null),\n      dueDate: new FormControl(null),\n      institution: new FormControl(null),\n      balance: new FormControl(null)\n    });\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\n      if (paramMap.has('cardId')) {\n        this.mode = 'edit';\n        this.cardId = paramMap.get('cardId');\n        this.isLoading = true;\n        this.cardsService.getCard(this.cardId).subscribe(cardData => {\n          this.isLoading = false;\n          this.card = {\n            id: cardData._id,\n            title: cardData.title,\n            name: cardData.name,\n            description: cardData.description,\n            interest: cardData.interest,\n            limit: cardData.limit,\n            dueDate: cardData.dueDate,\n            institution: cardData.institution,\n            balance: cardData.balance,\n            content: cardData.content,\n            imagePath: cardData.imagePath\n          };\n          this.form.setValue({\n            title: this.card.title,\n            content: this.card.content,\n            name: this.card.name,\n            description: this.card.description,\n            interest: this.card.interest,\n            limit: this.card.limit,\n            dueDate: this.card.dueDate,\n            institution: this.card.institution,\n            balance: this.card.balance,\n            image: this.card.imagePath\n          });\n        });\n      } else {\n        this.mode = 'create';\n        this.cardId = null;\n      }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({ image: file });\n    this.form.get('image').updateValueAndValidity();\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  }\n\n  onSaveCard() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    if (this.mode === 'create') {\n      this.cardsService.addCard(\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.name,\n        this.form.value.description,\n        this.form.value.interest,\n        this.form.value.limit,\n        this.form.value.dueDate,\n        this.form.value.institution,\n        this.form.value.balance,\n        this.form.value.image\n      );\n    } else {\n      this.cardsService.updateCard(\n        this.cardId,\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.name,\n        this.form.value.description,\n        this.form.value.interest,\n        this.form.value.limit,\n        this.form.value.dueDate,\n        this.form.value.institution,\n        this.form.value.balance,\n        this.form.value.image\n      );\n    }\n    this.form.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field,\r\ntextarea {\r\n  width: 100%;\r\n}\r\n\r\nmat-spinner {\r\n  margin: auto;\r\n}\r\n\r\ninput[type=\"file\"] {\r\n  visibility: hidden;\r\n}\r\n\r\n.image-preview {\r\n  height: 5rem;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.image-preview img {\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./card-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n    <form [formGroup]=\"form\" (submit)=\"onSaveCard()\" *ngIf=\"!isLoading\">\n      <mat-form-field>\n        <input matInput type=\"text\" formControlName=\"title\" placeholder=\"Card Title\">\n        <mat-error *ngIf=\"form.get('title').invalid\">Please enter a card title.</mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"text\" matInput formControlName=\"name\" placeholder=\"name\">\n        <mat-error *ngIf=\"form.get('name').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"text\" matInput formControlName=\"description\" placeholder=\"description\">\n        <mat-error *ngIf=\"form.get('description').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"number\" matInput formControlName=\"interest\" placeholder=\"interest\">\n        <mat-error *ngIf=\"form.get('interest').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"number\" matInput formControlName=\"limit\" placeholder=\"limit\">\n        <mat-error *ngIf=\"form.get('limit').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"date\" matInput formControlName=\"dueDate\" placeholder=\"dueDate\">\n        <mat-error *ngIf=\"form.get('dueDate').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"text\" matInput formControlName=\"institution\" placeholder=\"institution\">\n        <mat-error *ngIf=\"form.get('institution').invalid\"></mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <input type=\"number\" matInput formControlName=\"balance\" placeholder=\"balance\">\n        <mat-error *ngIf=\"form.get('balance').invalid\"></mat-error>\n      </mat-form-field>\n      <div>\n        <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Pick Image</button>\n        <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\">\n      </div>\n      <div class=\"image-preview\" *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\">\n        <img [src]=\"imagePreview\" [alt]=\"form.value.title\">\n      </div>\n      <mat-form-field>\n        <textarea matInput rows=\"4\" formControlName=\"content\" placeholder=\"Card Content\"></textarea>\n        <mat-error *ngIf=\"form.get('content').invalid\">Please enter a card title.</mat-error>\n      </mat-form-field>\n      <button mat-raised-button color=\"accent\" type=\"submit\">Save Card</button>\n    </form>\n</mat-card>\n"
        },
        {
            "name": "CardInputsComponent",
            "id": "component-CardInputsComponent-153e3928f11b7dd30c0a8964cebe7cc3b5bcb8e2ac87a4e85016818e76bb89116b8a14cf8ecf2ee3da970fa77491ab40ad063cb54c965ff0c988e2ba694a509c",
            "file": "src/app/card/card-inputs/card-inputs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-inputs",
            "styleUrls": [
                "./card-inputs.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-inputs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "amount",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cardsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardsService",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cardsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "estimatedInterest",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "estimatedInterestAnnual",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "finance",
                    "defaultValue": "new Finance()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "lineChartColors",
                    "defaultValue": "[{ borderColor: 'black', backgroundColor: 'rgba(107, 168, 237,0.28)' }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "lineChartData",
                    "defaultValue": "[{ data: this.pay_down_schedule, label: 'Pay Down Schedule' }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartDataSets[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "lineChartLabels",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "lineChartLegend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "lineChartOptions",
                    "defaultValue": "{ responsive: true }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "lineChartPlugins",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "lineChartType",
                    "defaultValue": "'line'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "maxInterest",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "monthlyPayment",
                    "defaultValue": "450",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "netMonthlyIncome",
                    "defaultValue": "4500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "number_of_payments_snowball",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "pay_down_schedule",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "payoff_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "total_interest",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "totalBalance",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "totalLimit",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "utilization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateInputAmount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "calculateInputPayment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "calculateInterest",
                    "args": [
                        {
                            "name": "principal",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "period",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "principal",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "period",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateNumberOfPaymentsSnowball",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "calculateUtilization",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "calculuateInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "compoundInterest",
                    "args": [
                        {
                            "name": "principal",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "annual_rate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "n_times",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "t_years",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "principal",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "annual_rate",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "n_times",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "t_years",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, OnChanges } from '@angular/core';\nimport { FormGroup, FormsModule } from '@angular/forms';\nimport * as moment from 'moment';\nimport { Finance } from 'financejs';\nimport { Subscription } from 'rxjs';\nimport { Card } from '../card.model';\nimport { CardsService } from '../card.service';\n\n\nimport { ChartDataSets, ChartOptions } from 'chart.js';\nimport { Color, Label } from 'ng2-charts';\n\n@Component({\n  selector: 'app-card-inputs',\n  templateUrl: './card-inputs.component.html',\n  styleUrls: ['./card-inputs.component.css']\n})\nexport class CardInputsComponent implements OnInit, OnDestroy {\n  cards: Card[] = [];\n  utilization: number;\n  totalLimit = 0;\n  totalBalance = 0;\n  maxInterest = 0;\n  estimatedInterestAnnual = 0;\n  estimatedInterest = 0;\n  isLoading = false;\n  private cardsSub: Subscription;\n  finance = new Finance();\n  private netMonthlyIncome = 4500;\n  private amount = 10;\n  private monthlyPayment = 450;\n  private number_of_payments_snowball = 0;\n  total_interest = 0;\n  pay_down_schedule = [];\n\n  lineChartData: ChartDataSets[] = [{ data: this.pay_down_schedule, label: 'Pay Down Schedule' }];\n  lineChartLabels: Label[] = [];\n  lineChartOptions = { responsive: true };\n  lineChartColors: Color[] = [{ borderColor: 'black', backgroundColor: 'rgba(107, 168, 237,0.28)' }];\n  lineChartLegend = true;\n  lineChartPlugins = [];\n  lineChartType = 'line';\n  payoff_date: string;\n\n  constructor(public cardsService: CardsService) { }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.cardsService.getCards();\n    this.cardsSub = this.cardsService.getCardUpdateListener()\n      .subscribe((cards: Card[]) => {\n        this.isLoading = false;\n        this.cards = cards;\n        this.calculateNumberOfPaymentsSnowball();\n        this.calculateUtilization();\n      });\n  }\n\n  onDelete(cardId: string) {\n    this.cardsService.deleteCard(cardId);\n  }\n\n  ngOnDestroy() {\n    this.cardsSub.unsubscribe();\n  }\n\n  refreshChart() {\n    if (this.number_of_payments_snowball < 1000) {\n      this.lineChartData = [\n        {\n          data: this.pay_down_schedule, label: 'Pay Down Schedule'\n        },\n      ];\n\n      const temp_list = [];\n\n      for (let index = 1; index < this.number_of_payments_snowball; index++) {\n        const endDateMoment = moment();\n        endDateMoment.add(index, 'months');\n        temp_list.push(endDateMoment.format(' MMM, YYYY'));\n      }\n\n      this.lineChartLabels = temp_list;\n    } else {\n      this.lineChartData = [{ data: [], label: 'Too Many Data Points' }];\n      this.lineChartLabels = [];\n\n    }\n\n\n  }\n\n\n  calculateInterest(principal, time, rate, period) {\n    const compoundInterest = (p, t, r, n) => {\n      const amount = p * (Math.pow((1 + (r / n)), (n * t)));\n      const interest = amount - p;\n      return interest;\n    };\n\n    return compoundInterest(principal, time, rate, period);\n  }\n\n  compoundInterest(principal, annual_rate, n_times, t_years) {\n    return principal * (Math.pow(1 + annual_rate / n_times, n_times * t_years) - 1);\n  }\n\n  calculateUtilization() {\n    this.totalLimit = 1;\n    this.totalBalance = 1;\n    this.maxInterest = 0;\n    this.estimatedInterest = 0;\n    this.estimatedInterestAnnual = 0;\n\n    this.cards.forEach(card => {\n\n      this.totalLimit += card.limit;\n      this.totalBalance += card.balance;\n      this.maxInterest += this.calculateInterest(card.balance, 1 / 12, card.interest, 12);\n      this.estimatedInterestAnnual += this.compoundInterest(card.balance, card.interest, 12, 1);\n      this.estimatedInterest += this.compoundInterest(card.balance, card.interest, 12, 1 / 12);\n    });\n    this.utilization = this.totalBalance / this.totalLimit;\n  }\n\n  calculateInputAmount() {\n    this.monthlyPayment = this.netMonthlyIncome * (this.amount / 100);\n    this.calculateNumberOfPaymentsSnowball();\n  }\n\n  calculateInputPayment() {\n    this.amount = (this.monthlyPayment / this.netMonthlyIncome) * 100;\n    this.calculateNumberOfPaymentsSnowball();\n  }\n\n  calculuateInputs() {\n    this.calculateInputAmount();\n  }\n\n  // Every month cards gain interest\n  calculateNumberOfPaymentsSnowball() {\n\n    // interim variables\n    let number_of_payments_snowball = 1;\n    let payment = this.monthlyPayment;\n    let total_interest = 0;\n    const pay_down_schedule = [];\n\n    // deep copy of cards, then sort smallest balance to smallest\n    const cardsCopy = this.cards.map(a => ({ ...a }));\n    cardsCopy.sort((a, b) => (a.balance > b.balance) ? 1 : -1);\n\n    // loop through copied cards\n    cardsCopy.forEach(card => {\n      // loop of unspecified length until card is balance 0\n      while (card.balance > 0) {\n        // ensure payment is smaller then balance\n        if (card.balance > payment) {\n          // decrease card balance.\n          card.balance -= payment;\n          // in case payment is not full monthly amount reset now\n          payment = this.monthlyPayment;\n          // move forward one cycle (month)\n          number_of_payments_snowball++;\n          // increments interest on all cards in copy by 1 month\n          if (incrementInterest()) {\n            // in case payments will never outpace interest\n            number_of_payments_snowball = Infinity;\n            break;\n          }\n        } else {\n          // decrease payment\n          payment -= card.balance;\n          // wipes balance\n          card.balance = 0;\n        }\n      }\n    });\n\n    function incrementInterest() {\n      // temp value to hold interest accumulated in this run\n      let interest_accumulated = 0;\n      let total_balance = 0;\n      // cycle through all cards\n      cardsCopy.forEach(card => {\n        const interest = (card.balance * card.interest / 12);\n        // add interest for total and card balance\n        interest_accumulated += interest;\n        card.balance += interest;\n        total_balance += card.balance;\n      });\n      // check that payment never is enough\n      if (interest_accumulated > payment) {\n        total_interest = Infinity;\n        return (true);\n      }\n      // used to update total interest property\n      total_interest += interest_accumulated;\n      pay_down_schedule.push(total_balance.toFixed(2));\n    }\n\n    const startDate = new Date();\n    const endDateMoment = moment(startDate);\n    endDateMoment.add(number_of_payments_snowball, 'months');\n    this.payoff_date = endDateMoment.format('MMMM DD, YYYY');\n    this.total_interest = total_interest;\n    this.pay_down_schedule = pay_down_schedule;\n    console.log(this.pay_down_schedule);\n    this.number_of_payments_snowball = number_of_payments_snowball;\n    this.refreshChart();\n\n  }\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".valcard {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  grid-gap: 1em;\r\n}\r\n\r\n.val_card {\r\n  align-items: center;\r\n\r\n}\r\n\r\n\r\n.valcard__value {\r\n  text-align: center;\r\n}\r\n\r\n.valcard__inputs {\r\n  display: flex;\r\n}\r\n\r\n.valcard__inputs mat-form-field {\r\n  margin-left: 1em;\r\n  margin-right: 1em;\r\n  flex: 1;\r\n}\r\n\r\n\r\n.valcard__chart {\r\n  margin: 1em;\r\n}\r\n\r\n.input_card {\r\n  margin-bottom: 1em;\r\n}\r\n\r\n/* min content */\r\n/* max content */\r\n\r\n\r\n\r\n@media (min-aspect-ratio: 1/5) {\r\n  .valcard {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n@media (min-aspect-ratio: 3/5) {\r\n  .valcard {\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n  }\r\n}\r\n\r\n@media (min-aspect-ratio: 5/5) {\r\n  .valcard {\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n  }\r\n}\r\n\r\n@media (min-aspect-ratio: 8/5) {\r\n  .valcard {\r\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\r\n  }\r\n}\r\n",
                    "styleUrl": "./card-inputs.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"input_card\">\n  <mat-card-header>\n    <mat-card-title>Inputted Values</mat-card-title>\n    <mat-card-subtitle>Information is only used for calculations</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <div class='valcard__inputs'>\n      <mat-form-field  floatLabel=\"always\">\n        <mat-label>Monthly Payment</mat-label>\n        <input\n        [(ngModel)]=\"monthlyPayment\" \n        matInput \n        type=\"number\" \n        class=\"example-right-align\" \n        (change)=\"calculateInputPayment()\"\n        placeholder=\"0\">\n        <span matPrefix>$&nbsp;</span>\n        <span matSuffix></span>\n      </mat-form-field>\n      <mat-form-field  floatLabel=\"always\">\n        <mat-label>Net Monthly Income</mat-label>\n        <input \n        [(ngModel)]=\"netMonthlyIncome\" \n        matInput \n        type=\"number\"\n        (change)=\"calculuateInputs()\"\n        value=\"netMonthlyIncome\"\n        class=\"example-right-align\" \n        placeholder=\"0\">\n        <span matPrefix>$&nbsp;</span>\n        <span matSuffix>.00</span>\n      </mat-form-field>\n      <mat-form-field   floatLabel=\"always\">      <mat-label>Amount</mat-label>\n        <input \n        matInput \n        [ngModel]=\"amount | number : '1.2'\" \n        (ngModelChange)=\"amount=$event\"\n        type=\"number\" \n        (change)=\"calculateInputAmount()\"\n        class=\"example-right-align\" \n        placeholder=\"0\">\n        <span matPrefix>%</span>\n        <span matSuffix></span>\n      </mat-form-field>\n    </div>\n  </mat-card-content>\n</mat-card>\n\n\n\n<mat-card class=\"val_card\">\n    <mat-card-header>\n        <mat-card-title>Calculated Values</mat-card-title>\n        <mat-card-subtitle>Displays information applicable to all the cards</mat-card-subtitle>\n    </mat-card-header>\n    <mat-card-content class=\"valcard\">\n      <!-- Utilization -->\n      <mat-card class=\"valcard__value\">\n        <mat-card-header>\n          <mat-card-title>Utilization</mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"card-content-align\">\n          <h2>{{this.utilization  | percent}}</h2>\n        </mat-card-content>\n      \n      \n      </mat-card>\n      <!-- Total Balance -->\n      <mat-card class=\"valcard__value\">\n        <mat-card-header>\n          <mat-card-title>Total Balance</mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"card-content-align\">\n          <h2>{{this.totalBalance  | currency:'CAD' }}</h2>\n        </mat-card-content>\n      </mat-card>\n      <!-- Total Limit -->\n      <mat-card class=\"valcard__value\">\n        <mat-card-header>\n          <mat-card-title>Total Limit</mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"card-content-align\">\n          <h2>{{this.totalLimit  | currency:'CAD' }}</h2>\n        </mat-card-content>\n      </mat-card>\n      <!-- Interest -->\n      <mat-card class=\"valcard__value\">\n        <mat-card-header>\n          <mat-card-title>Interest</mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"card-content-align\">\n          <h2>{{this.estimatedInterest  | currency:'CAD' }}</h2>\n        </mat-card-content>\n      </mat-card>\n      <!-- Number of Payments -->\n      <mat-card class=\"valcard__value\">\n        <mat-card-header>\n          <mat-card-title>Number of Payments</mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"card-content-align\">\n          <h2>{{this.number_of_payments_snowball}} </h2>\n        </mat-card-content>\n      </mat-card>\n      <!-- Payoff Date -->\n      <mat-card class=\"valcard__value\">\n        <mat-card-header>\n          <mat-card-title>Payoff Date</mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"card-content-align\">\n          <h2>{{this.payoff_date}} </h2>\n        </mat-card-content>\n      </mat-card>\n      <!-- Total Interest -->\n      <mat-card class=\"valcard__value\">\n        <mat-card-header>\n          <mat-card-title>Total Interest</mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"card-content-align\">\n          <h2>{{this.total_interest | currency:'CAD' }} </h2>\n        </mat-card-content>\n      </mat-card>\n    </mat-card-content>\n</mat-card>\n\n\n\n\n<mat-card class=\"valcard__chart\">\n  <mat-card-header>\n    <mat-card-title>Pay Down Chart</mat-card-title>\n    <mat-card-subtitle>subtitle</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content >\n    <div class=\"chart-wrapper\">\n      <canvas baseChart \n          [datasets]=\"lineChartData\" \n          [labels]=\"lineChartLabels\" \n          [options]=\"lineChartOptions\"\n          [colors]=\"lineChartColors\" \n          [legend]=\"lineChartLegend\" \n          [chartType]=\"lineChartType\" \n          [plugins]=\"lineChartPlugins\">\n      </canvas>\n  </div>\n  </mat-card-content>\n</mat-card>\n\n\n\n\n\n\n\n\n\n"
        },
        {
            "name": "CardListComponent",
            "id": "component-CardListComponent-e8504c06254ce7212593f39a2939888d1683664d8611b10fd38724753f6b4883351f7d09149704dd681abc3238bee997360027847dad9fc59b9ceafa82396955",
            "file": "src/app/card/card-list/card-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-list",
            "styleUrls": [
                "./card-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "amount",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cardsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardsService",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cardsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "estimatedInterest",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "estimatedInterestAnnual",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "maxInterest",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "monthlyPayment",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "netMonthlyIncome",
                    "defaultValue": "4500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "totalBalance",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "totalLimit",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "utilization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { TOUCH_BUFFER_MS } from '@angular/cdk/a11y';\nimport { DoCheck } from '@angular/core';\nimport { Component, OnInit, OnDestroy, OnChanges } from '@angular/core';\nimport { FormGroup, FormsModule } from '@angular/forms';\n\nimport { TransitionCheckState } from '@angular/material';\nimport { Subscription } from 'rxjs';\n\nimport { Card } from '../card.model';\nimport { CardsService } from '../card.service';\n\n@Component({\n  selector: 'app-card-list',\n  templateUrl: './card-list.component.html',\n  styleUrls: ['./card-list.component.css']\n})\nexport class CardListComponent implements OnInit, OnDestroy {\n\n  cards: Card[] = [];\n  utilization: number;\n  totalLimit = 0;\n  totalBalance = 0;\n  maxInterest = 0;\n  estimatedInterestAnnual = 0;\n  estimatedInterest = 0;\n  isLoading = false;\n  private cardsSub: Subscription;\n\n  private monthlyPayment = 100;\n  private netMonthlyIncome = 4500;\n  private amount = 10;\n\n\n\n\n  constructor(public cardsService: CardsService) { }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.cardsService.getCards();\n    this.cardsSub = this.cardsService.getCardUpdateListener()\n      .subscribe((cards: Card[]) => {\n        this.isLoading = false;\n        this.cards = cards;\n      });\n\n  }\n\n\n\n  onDelete(cardId: string) {\n    this.cardsService.deleteCard(cardId);\n  }\n\n  ngOnDestroy() {\n    this.cardsSub.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  margin-top: 1rem;\r\n}\r\n\r\nmat-spinner {\r\n  margin: auto;\r\n}\r\n\r\n\r\n.fincard {\r\n  margin: 3px;\r\n  display: inline-block;\r\n}\r\n\r\n.fincard__image {\r\n  max-width: 400px;\r\n  max-height: 252px;\r\n}\r\n\r\n.fincard__description {\r\n  width: 400px;\r\n}\r\n\r\n.fincard__info {\r\n  list-style: none;\r\n  text-align: left;\r\n}\r\n\r\n.fincard__display {\r\n  display: grid;\r\n  grid-gap: 1em;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n@media (min-aspect-ratio: 1/5) {\r\n  .fincard__display {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n@media (min-aspect-ratio: 3/5) {\r\n  .fincard__display {\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n  }\r\n}\r\n\r\n@media (min-aspect-ratio: 5/5) {\r\n  .fincard__display {\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n  }\r\n}\r\n\r\n@media (min-aspect-ratio: 8/5) {\r\n  .fincard__display {\r\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\r\n  }\r\n}\r\n",
                    "styleUrl": "./card-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n\n<app-card-inputs></app-card-inputs>\n\n<mat-card>\n  <mat-card-header>\n    <mat-card-title>Cards</mat-card-title>\n    <mat-card-subtitle>Input Your Cards</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content class=\"fincard__display\">\n    <mat-card class=\"fincard\" *ngFor=\"let card of cards\">\n      <!-- Display Identifying Information Of Financial Account -->\n      <mat-card-header>\n        <mat-card-title>{{ card.title }}</mat-card-title>\n        <mat-card-subtitle>{{ card.institution}}</mat-card-subtitle>\n      </mat-card-header>\n      <!-- Display Card (Should be SVG) -->\n      <!-- Display Card Content -->\n      <mat-card-content>\n        <img class=\"fincard__image\" mat-card-image  [src]=\"card.imagePath\" [alt]=\"card.title\">\n        <ul dense class='fincard__info'>\n          <li class='fincard__info__item'>\n            <mat-icon matListIcon>calendar_today</mat-icon>\n            Due on {{ card.dueDate | date : 'fullDate'}}\n          </li>\n          <li>\n            <mat-icon matListIcon>account_balance_wallet</mat-icon>\n            {{ card.balance | currency:'CAD' }} balance\n          </li>\n          <li>\n            <mat-icon matListIcon>credit_card</mat-icon>\n            {{ card.limit | currency:'CAD' }} limit\n          </li>\n          <li>\n            <mat-icon matListIcon>pie_chart</mat-icon>\n            {{ card.balance / card.limit | percent }} utilization\n          </li>\n          <li>\n            <mat-icon matListIcon>monetization_on</mat-icon>\n            {{ card.interest | percent }} interest\n          </li>\n        </ul>\n      </mat-card-content>\n      <!-- Footer Buttons -->  \n      <mat-card-actions class=\"fincard__actions\">\n        <a mat-raised-button color=\"primary\" [routerLink]=\"['/card/edit', card.id]\">EDIT</a>\n        <button mat-raised-button color=\"warn\" (click)=\"onDelete(card.id)\">DELETE</button>\n      </mat-card-actions>\n    </mat-card>\n  </mat-card-content>\n</mat-card>\n\n<p class=\"info-text mat-body-1\" *ngIf=\"cards.length <= 0 && !isLoading\">No cards added yet!</p>\n"
        },
        {
            "name": "CardRepaymentComponent",
            "id": "component-CardRepaymentComponent-55eaddeb0e985c7f520436d5ca21921c8644f0c8b2e4e03f5b9aef88fcc085916e795411b244d80d764c2e72151f8cec2656cca914f500f920b06424c93b5c08",
            "file": "src/app/card/card-repayment/card-repayment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-repayment",
            "styleUrls": [
                "./card-repayment.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-repayment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-card-repayment',\n  templateUrl: './card-repayment.component.html',\n  styleUrls: ['./card-repayment.component.css']\n})\nexport class CardRepaymentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card-repayment.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": ""
        },
        {
            "name": "DoughnutChartComponent",
            "id": "component-DoughnutChartComponent-cc4bc06969583d907b129aca572b8bb5e980341a8aed48728e3a6298f77a47cdeb87f3240a95a8050322091f15eb343579e951cbc5048852da4d40ad44774f34",
            "file": "src/app/charts/doughnut-chart/doughnut-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-doughnut-chart",
            "styleUrls": [
                "./doughnut-chart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./doughnut-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-doughnut-chart',\n  templateUrl: './doughnut-chart.component.html',\n  styleUrls: ['./doughnut-chart.component.css']\n})\nexport class DoughnutChartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./doughnut-chart.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>doughnut-chart works!</p>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0cd94fbc94a83702e45bf987cb3b3f9074d69cd27e6ca2e4fbac0dc5b5047bd4dc3a9ce8a77f6bd9ab7ae3e6ca8e49b34bed529ca0da0fa428fec544a0324870",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-4293492cea7fee2d08a02301473e89c29be38f6411907622a88f50258094a3b2b11e6ad28b95e4398969dfe10439dad60b6a01b097fdff456f7e308339486488-1",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-header\",\n  templateUrl: \"./header.component.html\",\n  styleUrls: [\"./header.component.css\"],\n})\nexport class HeaderComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\na {\n  text-decoration: none;\n  color: white;\n}\n\nspan {\n  margin-right: 1rem;\n}\n\n.spacer {\n  flex: 1 1 auto;\n}\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar color=\"primary\">\n  <span>\n    <a routerLink=\"/\">Posts</a>\n  </span>\n  <span>\n    <a routerLink=\"card\">Cards</a>\n  </span>\n  <span>\n    <a routerLink=\"bill\">Bills</a>\n  </span>\n  <span>\n    <a routerLink=\"account\">Accounts</a>\n  </span>\n  <span>\n    <a routerLink=\"budgets\">Budgets</a>\n  </span>\n  <span class=\"spacer\"></span>\n  <ul>\n    <li>\n      <a mat-button routerLink=\"/create\" routerLinkActive=\"mat-accent\">New Post</a>\n    </li>\n  </ul>\n  <ul>\n    <li>\n      <a mat-button routerLink=\"card/create\" routerLinkActive=\"mat-accent\">New Card</a>\n    </li>\n  </ul>\n  <ul>\n    <li>\n      <a mat-button routerLink=\"bill/create\" routerLinkActive=\"mat-accent\">New Bill</a>\n    </li>\n  </ul>\n  <ul>\n    <li>\n      <a mat-button routerLink=\"account/create\" routerLinkActive=\"mat-accent\">New Account</a>\n    </li>\n  </ul>\n  <ul>\n    <li>\n      <a mat-button routerLink=\"budgets/create\" routerLinkActive=\"mat-accent\">New Budget</a>\n    </li>\n  </ul>\n</mat-toolbar>\n"
        },
        {
            "name": "IncomeComponent",
            "id": "component-IncomeComponent-36ced5802ec08b8dea036453c41ce0c72fd68b5c2622cc84d512ee7197c36a04f4d68565cef9b9d91b5b5145bc6c1a1c610c6a7b1d7690592d3cca02d3295f8a",
            "file": "src/app/income/income.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-income",
            "styleUrls": [
                "./income.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./income.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-income',\n  templateUrl: './income.component.html',\n  styleUrls: ['./income.component.css']\n})\nexport class IncomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./income.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>income works!</p>\n"
        },
        {
            "name": "IncomeCreateComponent",
            "id": "component-IncomeCreateComponent-98df383a5cdbfdbc46ed00a64ae521f4cc3879378089c7e7bd137c678b110bd347c82a3248d90709c24902b78af1681d7f2cbad9118d0e255f67ef8653abfa98",
            "file": "src/app/income/income-create/income-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-income-create",
            "styleUrls": [
                "./income-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./income-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-income-create',\n  templateUrl: './income-create.component.html',\n  styleUrls: ['./income-create.component.css']\n})\nexport class IncomeCreateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./income-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>income-create works!</p>\n"
        },
        {
            "name": "IncomeListComponent",
            "id": "component-IncomeListComponent-3d0aab4d2682394acd0f68eb78c79e40502792058dd9cee69b89a4d03cf699226124be97c6d71a624bf64e7cfa31e66f84b1dc2e9fe7fe31df63f4957e00baa0",
            "file": "src/app/income/income-list/income-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-income-list",
            "styleUrls": [
                "./income-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./income-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-income-list',\n  templateUrl: './income-list.component.html',\n  styleUrls: ['./income-list.component.css']\n})\nexport class IncomeListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./income-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>income-list works!</p>\n"
        },
        {
            "name": "InvestmentComponent",
            "id": "component-InvestmentComponent-7fcc50d10195cccb0509609a74c41a89b54f8e2bae1d65c9b2a24b66ad4708eb654d868de41bf1add7417c79e533a5bd02c8393995dcd7de1750c6b5e1f5899e",
            "file": "src/app/investment/investment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-investment",
            "styleUrls": [
                "./investment.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./investment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-investment',\n  templateUrl: './investment.component.html',\n  styleUrls: ['./investment.component.css']\n})\nexport class InvestmentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./investment.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>investment works!</p>\n"
        },
        {
            "name": "InvestmentCreateComponent",
            "id": "component-InvestmentCreateComponent-43c246d25b79a2fd9a9faf9d3ca46289b13ab394c929ad5d4c2aa4226c14ff3af22c2e9a3e2d9213d6eba6210b899ec1a0adfb9680a88fb350c38c75292f07cd",
            "file": "src/app/investment/investment-create/investment-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-investment-create",
            "styleUrls": [
                "./investment-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./investment-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-investment-create',\n  templateUrl: './investment-create.component.html',\n  styleUrls: ['./investment-create.component.css']\n})\nexport class InvestmentCreateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./investment-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>investment-create works!</p>\n"
        },
        {
            "name": "InvestmentListComponent",
            "id": "component-InvestmentListComponent-ad2ef86c583b5a91d4a264e13d781e2501505195779bce50a4052bd19d5ee5360ea5a99dda5366a261546a88596e59698c4e5bbd6d28df96bfc224f28243c5ab",
            "file": "src/app/investment/investment-list/investment-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-investment-list",
            "styleUrls": [
                "./investment-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./investment-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-investment-list',\n  templateUrl: './investment-list.component.html',\n  styleUrls: ['./investment-list.component.css']\n})\nexport class InvestmentListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./investment-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>investment-list works!</p>\n"
        },
        {
            "name": "LiabilityComponent",
            "id": "component-LiabilityComponent-4c966448aca75a874daf7ee636c95dd7e2b15e2f65884881012e89610201cdc4e1122df84228dcb5ce0496e968309030b5081ff5aa7e20590871246d7cce16b7",
            "file": "src/app/liability/liability.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-liability",
            "styleUrls": [
                "./liability.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./liability.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-liability',\n  templateUrl: './liability.component.html',\n  styleUrls: ['./liability.component.css']\n})\nexport class LiabilityComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./liability.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>liability works!</p>\n"
        },
        {
            "name": "LiabilityCreateComponent",
            "id": "component-LiabilityCreateComponent-d842e357bb25ffc271f34912fa298c45552737349b9ced1ee114c3a82980d8e077b426ebff2df81f5f98865d1806c8c59389a489b6e902ef13de7edfd384757b",
            "file": "src/app/liability/liability-create/liability-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-liability-create",
            "styleUrls": [
                "./liability-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./liability-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-liability-create',\n  templateUrl: './liability-create.component.html',\n  styleUrls: ['./liability-create.component.css']\n})\nexport class LiabilityCreateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./liability-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>liability-create works!</p>\n"
        },
        {
            "name": "LiabilityListComponent",
            "id": "component-LiabilityListComponent-c63af15ed34d696d7e03911574a72f24a28127f3c4e2b40dca935b65c7eabd4a5027e2b82b2f2c14b68660d1f72ba5af2ce1c4d588e16ab439b6d450a9bcede6",
            "file": "src/app/liability/liability-list/liability-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-liability-list",
            "styleUrls": [
                "./liability-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./liability-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-liability-list',\n  templateUrl: './liability-list.component.html',\n  styleUrls: ['./liability-list.component.css']\n})\nexport class LiabilityListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./liability-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>liability-list works!</p>\n"
        },
        {
            "name": "LineChartComponent",
            "id": "component-LineChartComponent-9e727030acb94c6a6615b368b743739b7e027ce1ae0f5847223ee1e7e1e6b14af8fe190d4a3c8dae4a763a620378ae15ff64193dc3c3de784d399f0bd3e2cfb1",
            "file": "src/app/charts/line-chart/line-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-line-chart",
            "styleUrls": [
                "./line-chart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./line-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "lineChartColors",
                    "defaultValue": "[\n    {\n      borderColor: 'black',\n      backgroundColor: 'rgba(255,255,0,0.28)',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "lineChartData",
                    "defaultValue": "[\n    { data: [85, 72, 78, 75, 77, 75], label: 'Crude oil prices' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartDataSets[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "lineChartLabels",
                    "defaultValue": "['January', 'February', 'March', 'April', 'May', 'June']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Label[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "lineChartLegend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "lineChartOptions",
                    "defaultValue": "{\n    responsive: true,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "lineChartPlugins",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "lineChartType",
                    "defaultValue": "'line'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, } from '@angular/core';\nimport { ChartDataSets, ChartOptions } from 'chart.js';\nimport { Color, Label } from 'ng2-charts';\n\n@Component({\n  selector: 'app-line-chart',\n  templateUrl: './line-chart.component.html',\n  styleUrls: ['./line-chart.component.css']\n})\n\nexport class LineChartComponent {\n\n  lineChartData: ChartDataSets[] = [\n    { data: [85, 72, 78, 75, 77, 75], label: 'Crude oil prices' },\n  ];\n\n  lineChartLabels: Label[] = ['January', 'February', 'March', 'April', 'May', 'June'];\n\n  lineChartOptions = {\n    responsive: true,\n  };\n\n  lineChartColors: Color[] = [\n    {\n      borderColor: 'black',\n      backgroundColor: 'rgba(255,255,0,0.28)',\n    },\n  ];\n\n  lineChartLegend = true;\n  lineChartPlugins = [];\n  lineChartType = 'line';\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./line-chart.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"chart-wrapper\">\n    <canvas baseChart \n        [datasets]=\"lineChartData\" \n        [labels]=\"lineChartLabels\" \n        [options]=\"lineChartOptions\"\n        [colors]=\"lineChartColors\" \n        [legend]=\"lineChartLegend\" \n        [chartType]=\"lineChartType\" \n        [plugins]=\"lineChartPlugins\">\n    </canvas>\n</div>"
        },
        {
            "name": "LoanComponent",
            "id": "component-LoanComponent-90d72fe5d0e45292aa91f946c1b6f3385e894ded305809fadca606001b4a5bef6b874110dcc245a9dac07e0b0eb4d5e74b4860239b37de47c1dc00c928d79c6a",
            "file": "src/app/loan/loan.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loan",
            "styleUrls": [
                "./loan.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loan.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-loan',\n  templateUrl: './loan.component.html',\n  styleUrls: ['./loan.component.css']\n})\nexport class LoanComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./loan.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>loan works!</p>\n"
        },
        {
            "name": "LoanCreateComponent",
            "id": "component-LoanCreateComponent-ac5949a66c2d1d403a75939587bf98756b3acf2345fc02f43eb9e33b3a2bcb740e81e205b1e37a6f661c28ae59b6eb65e5d55de1b28842606526521b4d3b631f",
            "file": "src/app/loan/loan-create/loan-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loan-create",
            "styleUrls": [
                "./loan-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loan-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-loan-create',\n  templateUrl: './loan-create.component.html',\n  styleUrls: ['./loan-create.component.css']\n})\nexport class LoanCreateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./loan-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>loan-create works!</p>\n"
        },
        {
            "name": "LoanListComponent",
            "id": "component-LoanListComponent-03775b0ee6dc1acd077a668a03284ac7260369e49868e1dc3794d633d3e8ba40caaf3119507df20eaa1434f61ffe7328f58373cbd1613b92391bed9648c3156f",
            "file": "src/app/loan/loan-list/loan-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loan-list",
            "styleUrls": [
                "./loan-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loan-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-loan-list',\n  templateUrl: './loan-list.component.html',\n  styleUrls: ['./loan-list.component.css']\n})\nexport class LoanListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./loan-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>loan-list works!</p>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-432c9ae0bcf6e2e1f46701f7565a67376cb10145b7d049c5fe930cf8f075c6e02e24151589750b18cbaa8266f7c61393b95c4d833fbfd71ee228904aa014349f",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PieChartComponent",
            "id": "component-PieChartComponent-ee537ff788fdc8734968cda77467bfa8e8df4d2f6a3a098d9c3be819bd5325cd7ca780ac37797a63eaf91bff2437d98d97c3e8dc6cea9766f26d83bd23428cbc",
            "file": "src/app/charts/pie-chart/pie-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pie-chart",
            "styleUrls": [
                "./pie-chart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./pie-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pie-chart',\n  templateUrl: './pie-chart.component.html',\n  styleUrls: ['./pie-chart.component.css']\n})\nexport class PieChartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pie-chart.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>pie-chart works!</p>\n"
        },
        {
            "name": "PostCreateComponent",
            "id": "component-PostCreateComponent-6e7eed352e05204f9b1a5a46c3571917d01e37aab861cfc536d9ad6cf74bdf9b6f8440e484fc180e8e9c86efa9619d3beb814f35646b4ca46aa35d4eae5a94c9",
            "file": "src/app/posts/post-create/post-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-create",
            "styleUrls": [
                "./post-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./post-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "enteredContent",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "enteredTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "imagePreview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "mode",
                    "defaultValue": "'create'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "post",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Post",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "postsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PostsService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImagePicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSavePost",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\n\nimport { PostsService } from '../posts.service';\nimport { Post } from '../post.model';\nimport { mimeType } from './mime-type.validator';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\nexport class PostCreateComponent implements OnInit {\n  enteredTitle = '';\n  enteredContent = '';\n  post: Post;\n  isLoading = false;\n  form: FormGroup;\n  imagePreview: string;\n  private mode = 'create';\n  private postId: string;\n\n  constructor(\n    public postsService: PostsService,\n    public route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      content: new FormControl(null, { validators: [Validators.required] }),\n      image: new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType]\n      })\n    });\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\n      if (paramMap.has('postId')) {\n        this.mode = 'edit';\n        this.postId = paramMap.get('postId');\n        this.isLoading = true;\n        this.postsService.getPost(this.postId).subscribe(postData => {\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content,\n            imagePath: postData.imagePath\n          };\n          this.form.setValue({\n            title: this.post.title,\n            content: this.post.content,\n            image: this.post.imagePath\n          });\n        });\n      } else {\n        this.mode = 'create';\n        this.postId = null;\n      }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({ image: file });\n    this.form.get('image').updateValueAndValidity();\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  }\n\n  onSavePost() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    if (this.mode === 'create') {\n      this.postsService.addPost(\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.image\n      );\n    } else {\n      this.postsService.updatePost(\n        this.postId,\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.image\n      );\n    }\n    this.form.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-form-field,\ntextarea {\n  width: 100%;\n}\n\nmat-spinner {\n  margin: auto;\n}\n\ninput[type=\"file\"] {\n  visibility: hidden;\n}\n\n.image-preview {\n  height: 5rem;\n  margin: 1rem 0;\n}\n\n.image-preview img {\n  height: 100%;\n}\n",
                    "styleUrl": "./post-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form [formGroup]=\"form\" (submit)=\"onSavePost()\" *ngIf=\"!isLoading\">\n    <mat-form-field>\n      <input matInput type=\"text\" formControlName=\"title\" placeholder=\"Post Title\">\n      <mat-error *ngIf=\"form.get('title').invalid\">Please enter a post title.</mat-error>\n    </mat-form-field>\n    <div>\n      <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Pick Image</button>\n      <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\">\n    </div>\n    <div class=\"image-preview\" *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\">\n      <img [src]=\"imagePreview\" [alt]=\"form.value.title\">\n    </div>\n    <mat-form-field>\n      <textarea matInput rows=\"4\" formControlName=\"content\" placeholder=\"Post Content\"></textarea>\n      <mat-error *ngIf=\"form.get('content').invalid\">Please enter a post title.</mat-error>\n    </mat-form-field>\n    <button mat-raised-button color=\"accent\" type=\"submit\">Save Post</button>\n  </form>\n</mat-card>\n"
        },
        {
            "name": "PostListComponent",
            "id": "component-PostListComponent-8d7dc0a7e8aad14d22edf2ad7a7ccce8b62eefbeef8ef9091c2704b583fda560ad2a5533545eb008db514a58b3d2921da840ee8fb69f948a0c2bda486c72b9c7",
            "file": "src/app/posts/post-list/post-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post-list",
            "styleUrls": [
                "./post-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./post-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "posts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Post[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "postsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PostsService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "postsSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { Subscription } from 'rxjs';\n\nimport { Post } from \"../post.model\";\nimport { PostsService } from \"../posts.service\";\n\n@Component({\n  selector: \"app-post-list\",\n  templateUrl: \"./post-list.component.html\",\n  styleUrls: [\"./post-list.component.css\"]\n})\nexport class PostListComponent implements OnInit, OnDestroy {\n  // posts = [\n  //   { title: \"First Post\", content: \"This is the first post's content\" },\n  //   { title: \"Second Post\", content: \"This is the second post's content\" },\n  //   { title: \"Third Post\", content: \"This is the third post's content\" }\n  // ];\n  posts: Post[] = [];\n  isLoading = false;\n  private postsSub: Subscription;\n\n  constructor(public postsService: PostsService) {}\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.postsService.getPosts();\n    this.postsSub = this.postsService.getPostUpdateListener()\n      .subscribe((posts: Post[]) => {\n        this.isLoading = false;\n        this.posts = posts;\n      });\n  }\n\n  onDelete(postId: string) {\n    this.postsService.deletePost(postId);\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  margin-top: 1rem;\n}\n\nmat-spinner {\n  margin: auto;\n}\n\n.info-text {\n  text-align: center;\n}\n\n.post-image {\n  width: 100%;\n}\n\n.post-image img {\n  width: 50%;\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.5);\n}\n",
                    "styleUrl": "./post-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "postsService",
                        "type": "PostsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf=\"posts.length > 0 && !isLoading\">\n  <mat-expansion-panel *ngFor=\"let post of posts\">\n    <mat-expansion-panel-header>\n      {{ post.title }}\n    </mat-expansion-panel-header>\n    <div class=\"post-image\">\n      <img [src]=\"post.imagePath\" [alt]=\"post.title\">\n    </div>\n    <p>{{ post.content }}</p>\n    <mat-action-row>\n      <a mat-button color=\"primary\" [routerLink]=\"['/edit', post.id]\">EDIT</a>\n      <button mat-button color=\"warn\" (click)=\"onDelete(post.id)\">DELETE</button>\n    </mat-action-row>\n  </mat-expansion-panel>\n</mat-accordion>\n<p class=\"info-text mat-body-1\" *ngIf=\"posts.length <= 0 && !isLoading\">No posts added yet!</p>\n"
        },
        {
            "name": "RadarChartComponent",
            "id": "component-RadarChartComponent-74ebdca6af7fcb8542579b90441dd8be84987530372870e827ba6dbd99792d6b5f6c6e6f3c4a494044cba946c78dee6bc4be43e8b00b989074851ae016a17e32",
            "file": "src/app/charts/radar-chart/radar-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-radar-chart",
            "styleUrls": [
                "./radar-chart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./radar-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-radar-chart',\n  templateUrl: './radar-chart.component.html',\n  styleUrls: ['./radar-chart.component.css']\n})\nexport class RadarChartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./radar-chart.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>radar-chart works!</p>\n"
        },
        {
            "name": "WishComponent",
            "id": "component-WishComponent-898b07b5ace16ee4b32451c152c3fcfe60c1f8295a8bb1169fa8d5f43dc131a7c27d7904b31cd65d4a8d5bf737d1678f579749e569ffc17e959bd008edb36856",
            "file": "src/app/wish/wish.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wish",
            "styleUrls": [
                "./wish.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./wish.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-wish',\n  templateUrl: './wish.component.html',\n  styleUrls: ['./wish.component.css']\n})\nexport class WishComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./wish.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>wish works!</p>\n"
        },
        {
            "name": "WishCreateComponent",
            "id": "component-WishCreateComponent-d68a396be69f4b37e665cc93e47a74c92da07b1c040b59919fafafdb4b5d2bfe9200b18e281da05783f8ce112d71eccecc797d87b499c9e7d22b2ceb11b22733",
            "file": "src/app/wish/wish-create/wish-create.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wish-create",
            "styleUrls": [
                "./wish-create.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./wish-create.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-wish-create',\n  templateUrl: './wish-create.component.html',\n  styleUrls: ['./wish-create.component.css']\n})\nexport class WishCreateComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./wish-create.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>wish-create works!</p>\n"
        },
        {
            "name": "WishListComponent",
            "id": "component-WishListComponent-f16d57c58aaeca0f3aa6ce15adfac41e7cfa3722fdb16d14bd6abb02325e1213e242292f212b05ff2a13cf7738f620b032366e3a0cb7dc844b0d6a9f7d58b176",
            "file": "src/app/wish/wish-list/wish-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wish-list",
            "styleUrls": [
                "./wish-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./wish-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-wish-list',\n  templateUrl: './wish-list.component.html',\n  styleUrls: ['./wish-list.component.css']\n})\nexport class WishListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./wish-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>wish-list works!</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AccountsModule",
            "id": "module-AccountsModule-1289632c115ed72612d6832ca918139f142af657117fb7da02bed01801a493c29fcd307011a4ead90f96c20036d076b1d74e25c9f1bf524b87fabcb6f2ba4e63",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/accounts/accounts.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { AccountsService } from './accounts.service';\nimport { AccountsController } from './accounts.controller';\n\n@Module({\n  controllers: [AccountsController],\n  providers: [AccountsService]\n})\nexport class AccountsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AccountsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-0ef9487b695d5cfd1b235bf1a8dbfe67e5fd977ada173670bc8c0516b55b02ea32889dd6aef489576b566fef81989a1c2ec1ce6f95cad2d8490127c94e18ea00",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/app.module.ts",
            "methods": [],
            "sourceCode": "/* eslint-disable prettier/prettier */\nimport { AccountsModule } from \"./accounts/accounts.module\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { AssetsModule } from \"./assets/assets.module\";\nimport { BillsModule } from \"./bills/bills.module\";\nimport { BudgetsModule } from \"./budgets/budgets.module\";\nimport { CardsModule } from \"./cards/cards.module\";\nimport { ChartsModule } from \"./charts/charts.module\";\nimport { IncomesModule } from \"./incomes/incomes.module\";\nimport { InstitutionsModule } from \"./institutions/institutions.module\";\nimport { InvestmentsModule } from \"./investments/investments.module\";\nimport { LiabilitiesModule } from \"./liabilities/liabilities.module\";\nimport { LoansModule } from \"./loans/loans.module\";\nimport { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { ProductsModule } from \"./products/products.module\";\nimport { WishesModule } from \"./wishes/wishes.module\";\n\n@Module({\n  imports: [\n    ProductsModule,\n    BudgetsModule,\n    CardsModule,\n    ChartsModule,\n    IncomesModule,\n    InstitutionsModule,\n    InvestmentsModule,\n    LiabilitiesModule,\n    LoansModule,\n    WishesModule,\n    AccountsModule,\n    BillsModule,\n    MongooseModule.forRoot(\n      \"mongodb+srv://Jacob:PTEh0h05rF4KygVO@cluster0.fjy4q.mongodb.net/node-angular?retryWrites=true&w=majority\",\n    ),\n    AssetsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AppService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AccountsModule"
                        },
                        {
                            "name": "AssetsModule"
                        },
                        {
                            "name": "BillsModule"
                        },
                        {
                            "name": "BudgetsModule"
                        },
                        {
                            "name": "CardsModule"
                        },
                        {
                            "name": "ChartsModule"
                        },
                        {
                            "name": "IncomesModule"
                        },
                        {
                            "name": "InstitutionsModule"
                        },
                        {
                            "name": "InvestmentsModule"
                        },
                        {
                            "name": "LiabilitiesModule"
                        },
                        {
                            "name": "LoansModule"
                        },
                        {
                            "name": "ProductsModule"
                        },
                        {
                            "name": "WishesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-4586aa2a18014fd92998caed3d20490d7cece6e2df46af9da8dd25b332280d66378bdb598bb57be89c750022e83bc0285e03a0597e72630f654ef98db1b1f168-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport {\n  MatButtonModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatDividerModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatProgressSpinnerModule,\n  MatSelectModule,\n  MatToolbarModule,\n} from \"@angular/material\";\n\nimport { AccountComponent } from \"./accounts/account.component\";\nimport { AccountCreateComponent } from \"./accounts/account-create/account-create.component\";\nimport { AccountListComponent } from \"./accounts/account-list/account-list.component\";\nimport { AppComponent } from \"./app.component\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { BarChartComponent } from \"./charts/bar-chart/bar-chart.component\";\nimport { BillComponent } from \"./bills/bill.component\";\nimport { BillCreateComponent } from \"./bills/bill-create/bill-create.component\";\nimport { BillListComponent } from \"./bills/bill-list/bill-list.component\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BubbleChartComponent } from \"./charts/bubble-chart/bubble-chart.component\";\nimport { BudgetComponent } from \"./budget/budget.component\";\nimport { BudgetCreateComponent } from \"./budget/budget-create/budget-create.component\";\nimport { BudgetListComponent } from \"./budget/budget-list/budget-list.component\";\nimport { CardComponent } from \"./card/card.component\";\nimport { CardCreateComponent } from \"./card/card-create/card-create.component\";\nimport { CardInputsComponent } from \"./card/card-inputs/card-inputs.component\";\nimport { CardListComponent } from \"./card/card-list/card-list.component\";\nimport { CardRepaymentComponent } from \"./card/card-repayment/card-repayment.component\";\nimport { ChartsModule } from \"ng2-charts\";\nimport { DoughnutChartComponent } from \"./charts/doughnut-chart/doughnut-chart.component\";\nimport { HeaderComponent } from \"./header/header.component\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { IncomeComponent } from \"./income/income.component\";\nimport { IncomeCreateComponent } from \"./income/income-create/income-create.component\";\nimport { IncomeListComponent } from \"./income/income-list/income-list.component\";\nimport { InvestmentComponent } from \"./investment/investment.component\";\nimport { InvestmentCreateComponent } from \"./investment/investment-create/investment-create.component\";\nimport { InvestmentListComponent } from \"./investment/investment-list/investment-list.component\";\nimport { LiabilityComponent } from \"./liability/liability.component\";\nimport { LiabilityCreateComponent } from \"./liability/liability-create/liability-create.component\";\nimport { LiabilityListComponent } from \"./liability/liability-list/liability-list.component\";\nimport { LineChartComponent } from \"./charts/line-chart/line-chart.component\";\nimport { LoanComponent } from \"./loan/loan.component\";\nimport { LoanCreateComponent } from \"./loan/loan-create/loan-create.component\";\nimport { LoanListComponent } from \"./loan/loan-list/loan-list.component\";\nimport { NgModule } from \"@angular/core\";\nimport { PieChartComponent } from \"./charts/pie-chart/pie-chart.component\";\nimport { PostCreateComponent } from \"./posts/post-create/post-create.component\";\nimport { PostListComponent } from \"./posts/post-list/post-list.component\";\nimport { RadarChartComponent } from \"./charts/radar-chart/radar-chart.component\";\nimport { WishComponent } from \"./wish/wish.component\";\nimport { WishCreateComponent } from \"./wish/wish-create/wish-create.component\";\nimport { WishListComponent } from \"./wish/wish-list/wish-list.component\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostCreateComponent,\n    HeaderComponent,\n    PostListComponent,\n    CardComponent,\n    CardCreateComponent,\n    CardListComponent,\n    BillCreateComponent,\n    BillListComponent,\n    AccountComponent,\n    AccountCreateComponent,\n    AccountListComponent,\n    CardRepaymentComponent,\n    CardInputsComponent,\n    BarChartComponent,\n    BubbleChartComponent,\n    LineChartComponent,\n    PieChartComponent,\n    RadarChartComponent,\n    DoughnutChartComponent,\n    BudgetComponent,\n    BudgetCreateComponent,\n    BudgetListComponent,\n    IncomeComponent,\n    IncomeCreateComponent,\n    IncomeListComponent,\n    InvestmentComponent,\n    InvestmentCreateComponent,\n    InvestmentListComponent,\n    LiabilityComponent,\n    LiabilityCreateComponent,\n    LiabilityListComponent,\n    LoanComponent,\n    LoanCreateComponent,\n    LoanListComponent,\n    WishComponent,\n    WishCreateComponent,\n    WishListComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ChartsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatCardModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatProgressSpinnerModule,\n    MatGridListModule,\n    MatDividerModule,\n    MatListModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatIconModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountComponent"
                        },
                        {
                            "name": "AccountCreateComponent"
                        },
                        {
                            "name": "AccountListComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BarChartComponent"
                        },
                        {
                            "name": "BillCreateComponent"
                        },
                        {
                            "name": "BillListComponent"
                        },
                        {
                            "name": "BubbleChartComponent"
                        },
                        {
                            "name": "BudgetComponent"
                        },
                        {
                            "name": "BudgetCreateComponent"
                        },
                        {
                            "name": "BudgetListComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardCreateComponent"
                        },
                        {
                            "name": "CardInputsComponent"
                        },
                        {
                            "name": "CardListComponent"
                        },
                        {
                            "name": "CardRepaymentComponent"
                        },
                        {
                            "name": "DoughnutChartComponent"
                        },
                        {
                            "name": "IncomeComponent"
                        },
                        {
                            "name": "IncomeCreateComponent"
                        },
                        {
                            "name": "IncomeListComponent"
                        },
                        {
                            "name": "InvestmentComponent"
                        },
                        {
                            "name": "InvestmentCreateComponent"
                        },
                        {
                            "name": "InvestmentListComponent"
                        },
                        {
                            "name": "LiabilityComponent"
                        },
                        {
                            "name": "LiabilityCreateComponent"
                        },
                        {
                            "name": "LiabilityListComponent"
                        },
                        {
                            "name": "LineChartComponent"
                        },
                        {
                            "name": "LoanComponent"
                        },
                        {
                            "name": "LoanCreateComponent"
                        },
                        {
                            "name": "LoanListComponent"
                        },
                        {
                            "name": "PieChartComponent"
                        },
                        {
                            "name": "PostCreateComponent"
                        },
                        {
                            "name": "PostListComponent"
                        },
                        {
                            "name": "RadarChartComponent"
                        },
                        {
                            "name": "WishComponent"
                        },
                        {
                            "name": "WishCreateComponent"
                        },
                        {
                            "name": "WishListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "ChartsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-0831081d785423520d0288933fbc82de79813ca601269c5a6e3d32e40e29291d413f398bbfdab095031ba99d300e14ab3576378111061742766f07f636216cee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from \"@angular/router\";\n\nimport { AccountCreateComponent } from \"./accounts/account-create/account-create.component\";\nimport { AccountListComponent } from \"./accounts/account-list/account-list.component\";\nimport { BillCreateComponent } from \"./bills/bill-create/bill-create.component\";\nimport { BillListComponent } from \"./bills/bill-list/bill-list.component\";\nimport { BudgetCreateComponent } from \"./budget/budget-create/budget-create.component\";\nimport { BudgetListComponent } from \"./budget/budget-list/budget-list.component\";\nimport { CardCreateComponent } from \"./card/card-create/card-create.component\";\nimport { CardListComponent } from \"./card/card-list/card-list.component\";\nimport { NgModule } from \"@angular/core\";\nimport { PostCreateComponent } from \"./posts/post-create/post-create.component\";\nimport { PostListComponent } from \"./posts/post-list/post-list.component\";\n\nconst routes: Routes = [\n  { path: \"\", component: PostListComponent },\n  { path: \"create\", component: PostCreateComponent },\n  { path: \"edit/:postId\", component: PostCreateComponent },\n\n  { path: \"card\", component: CardListComponent },\n  { path: \"card/create\", component: CardCreateComponent },\n  { path: \"card/edit/:cardId\", component: CardCreateComponent },\n\n  { path: \"bill\", component: BillListComponent },\n  { path: \"bill/create\", component: BillCreateComponent },\n  { path: \"bill/edit/:billId\", component: BillCreateComponent },\n\n  { path: \"account\", component: AccountListComponent },\n  { path: \"account/create\", component: AccountCreateComponent },\n  { path: \"account/edit/:accountId\", component: AccountCreateComponent },\n\n  { path: \"budgets\", component: BudgetListComponent },\n  { path: \"budgets/create\", component: BudgetCreateComponent },\n  { path: \"budgets/edit/:budgetId\", component: BudgetCreateComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AssetsModule",
            "id": "module-AssetsModule-c38ada9ea8405febd67093ef6cb263acdd4cd63e74e8a9c9b9e79dcde5ce63925aa9651526edd7c4172601cee483ebb9d94b528331d6e436552780fb8cbb8d1f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/assets/assets.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { AssetsService } from './assets.service';\nimport { AssetsController } from './assets.controller';\n\n@Module({\n  controllers: [AssetsController],\n  providers: [AssetsService]\n})\nexport class AssetsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AssetsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BillsModule",
            "id": "module-BillsModule-10a8f50c97dfea87a4b8b0e1e50577686083be2c0bab0d8d917f4b2600fa0d1a626f56d044ea1ec95593ba45dae8771f723d6f143ca4a39b59d696522b45c676",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/bills/bills.module.ts",
            "methods": [],
            "sourceCode": "import { BillSchema } from './entities/bill.model';\nimport { BillsController } from './bills.controller';\nimport { BillsService } from './bills.service';\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: 'Bill', schema: BillSchema }])],\n  controllers: [BillsController],\n  providers: [BillsService],\n})\nexport class BillsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "BillsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BudgetsModule",
            "id": "module-BudgetsModule-a54e379b4415f15123b425a84fc091063b08ba377710c895842bf07b50e7aaeeaef61c012d9db4de3e0f334f39b48589f083bb954b454904efc771206dfbdf77",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/budgets/budgets.module.ts",
            "methods": [],
            "sourceCode": "import { BudgetSchema } from './entities/budget.model';\nimport { BudgetsController } from './budgets.controller';\nimport { BudgetsService } from './budgets.service';\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Budget', schema: BudgetSchema }]),\n  ],\n  controllers: [BudgetsController],\n  providers: [BudgetsService],\n})\nexport class BudgetsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "BudgetsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CardsModule",
            "id": "module-CardsModule-ba4cbbc92dbac91aba0713d438c086597a7b8bb5c2e7d5e5af9b27fe66f7170201a60ccefe55af5ecf608f4e800104887f657112216ce437f20a234b02b0117c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/cards/cards.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { CardsService } from './cards.service';\nimport { CardsController } from './cards.controller';\n\n@Module({\n  controllers: [CardsController],\n  providers: [CardsService]\n})\nexport class CardsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CardsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChartsModule",
            "id": "module-ChartsModule-8b8ac65215ef7efc0dc42362c498ea90dcbe8887e9830ba60300509d81f1af52fbf1002c2b74aa9ef3039618f6d624ec3db77745ae4c86f2b0d8c9722d63c183",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/charts/charts.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { ChartsService } from './charts.service';\nimport { ChartsController } from './charts.controller';\n\n@Module({\n  controllers: [ChartsController],\n  providers: [ChartsService]\n})\nexport class ChartsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ChartsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IncomesModule",
            "id": "module-IncomesModule-c62d92fc371e9463245d39ef923cbade7e4517239aa634a82259b726628482c088e456b678267b9742d8309a0191c83f22dc6e6279e7a904be5225b7a185560e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/incomes/incomes.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { IncomesService } from './incomes.service';\nimport { IncomesController } from './incomes.controller';\n\n@Module({\n  controllers: [IncomesController],\n  providers: [IncomesService]\n})\nexport class IncomesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "IncomesService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InstitutionsModule",
            "id": "module-InstitutionsModule-57eee19792d32832c9ef42fda15b089a5f9be3bbf38ebcc9aa033d7297280571c347ba737b59c974babfbd9ba7a565dd7d5eda8802efe94f2443b0042546135b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/institutions/institutions.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { InstitutionsService } from './institutions.service';\nimport { InstitutionsController } from './institutions.controller';\n\n@Module({\n  controllers: [InstitutionsController],\n  providers: [InstitutionsService]\n})\nexport class InstitutionsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "InstitutionsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InvestmentsModule",
            "id": "module-InvestmentsModule-dba718d91d98fff5287f2df1aa9de85ee869cc368c7832d604f890caae5069480b5c90e541fc433cf76e315a8dd19f6071a59e889164f411281e944bab73949e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/investments/investments.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { InvestmentsService } from './investments.service';\nimport { InvestmentsController } from './investments.controller';\n\n@Module({\n  controllers: [InvestmentsController],\n  providers: [InvestmentsService]\n})\nexport class InvestmentsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "InvestmentsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LiabilitiesModule",
            "id": "module-LiabilitiesModule-456823a37e1f5c3aa05d33358f01703bef933b86e913f7e7bc5b2fc580aa2d8f299f521b61e4e2d2ad894c1a5e275c9d27ccff0f68b2c04a47048476ebcbdb8c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/liabilities/liabilities.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { LiabilitiesService } from './liabilities.service';\nimport { LiabilitiesController } from './liabilities.controller';\n\n@Module({\n  controllers: [LiabilitiesController],\n  providers: [LiabilitiesService]\n})\nexport class LiabilitiesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LiabilitiesService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoansModule",
            "id": "module-LoansModule-3e77fd739b5b8d3d1cee2f08bc836e09107ef0dea5192698e06829f3ea8ed00e41b85fe4dff650df45276eeed2935d379827aa5498ede3abc6c229cc3b2cd179",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/loans/loans.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { LoansService } from './loans.service';\nimport { LoansController } from './loans.controller';\n\n@Module({\n  controllers: [LoansController],\n  providers: [LoansService]\n})\nexport class LoansModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LoansService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductsModule",
            "id": "module-ProductsModule-1ce007b2ee13e186bad2a40534f86ff44b46cd97b9e445f40e2e0f8250270f398868dfef7d7cb6e77a5387bd9dbbe6aecbad090967678addf22e926796f230e2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/products/products.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { ProductsController } from './products.controller';\nimport { ProductsService } from './products.service';\n\n@Module({\n  controllers: [ProductsController],\n  providers: [ProductsService],\n})\nexport class ProductsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ProductsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WishesModule",
            "id": "module-WishesModule-fa4d0b3241b3fd9011175f53210cea86b20b8add1373ccb73c1ee56aa749a1ba0dba6dfbf88c67959d0366da6e787b03eea57f6e86eec15516d4a7bea79a879d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "nestbackend/src/wishes/wishes.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { WishesService } from './wishes.service';\nimport { WishesController } from './wishes.controller';\n\n@Module({\n  controllers: [WishesController],\n  providers: [WishesService]\n})\nexport class WishesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "WishesService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BillSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "nestbackend/src/bills/entities/bill.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new mongoose.Schema({\n  title: { type: String, required: true },\n  amount: { type: Number, required: true },\n  description: { type: String, required: true },\n  institution: { type: String },\n  category: { type: String },\n  frequency: { type: String },\n  dueDate: { type: Date, default: Date.now },\n  paymentMethod: { type: String },\n  imagePath: { type: String, required: true },\n})"
            },
            {
                "name": "BudgetSchema",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "nestbackend/src/budgets/entities/budget.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new mongoose.Schema({\n  budgetItem: { type: String, required: true },\n  budgetCategory: { type: String },\n  percentage: { type: Number, required: true },\n  percentageCategory: { type: Number, required: true },\n  exemptFromRecalculation: { type: Boolean, required: true },\n  fixedPriceValue: { type: Number },\n  contribution: { type: Number, required: true },\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mimeType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/accounts/account-create/mime-type.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof (control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = new Observable(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener('loadend', () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = '';\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case '89504e47':\n            isValid = true;\n            break;\n          case 'ffd8ffe0':\n          case 'ffd8ffe1':\n          case 'ffd8ffe2':\n          case 'ffd8ffe3':\n          case 'ffd8ffe8':\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
            },
            {
                "name": "mimeType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/budget/budget-create/mime-type.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof control.value === \"string\") {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = new Observable((observer: Observer<{ [key: string]: any }>) => {\n    fileReader.addEventListener(\"loadend\", () => {\n      const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(\n        0,\n        4\n      );\n      let header = \"\";\n      let isValid = false;\n      for (let i = 0; i < arr.length; i++) {\n        header += arr[i].toString(16);\n      }\n      switch (header) {\n        case \"89504e47\":\n          isValid = true;\n          break;\n        case \"ffd8ffe0\":\n        case \"ffd8ffe1\":\n        case \"ffd8ffe2\":\n        case \"ffd8ffe3\":\n        case \"ffd8ffe8\":\n          isValid = true;\n          break;\n        default:\n          isValid = false; // Or you can use the blob.type as fallback\n          break;\n      }\n      if (isValid) {\n        observer.next(null);\n      } else {\n        observer.next({ invalidMimeType: true });\n      }\n      observer.complete();\n    });\n    fileReader.readAsArrayBuffer(file);\n  });\n  return frObs;\n}"
            },
            {
                "name": "mimeType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/bills/bill-create/mime-type.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof (control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = new Observable(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener('loadend', () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = '';\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case '89504e47':\n            isValid = true;\n            break;\n          case 'ffd8ffe0':\n          case 'ffd8ffe1':\n          case 'ffd8ffe2':\n          case 'ffd8ffe3':\n          case 'ffd8ffe8':\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
            },
            {
                "name": "mimeType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/card/card-create/mime-type.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof (control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = new Observable(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener('loadend', () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = '';\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case '89504e47':\n            isValid = true;\n            break;\n          case 'ffd8ffe0':\n          case 'ffd8ffe1':\n          case 'ffd8ffe2':\n          case 'ffd8ffe3':\n          case 'ffd8ffe8':\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
            },
            {
                "name": "mimeType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/institution/account-create/mime-type.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof (control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = new Observable(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener('loadend', () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = '';\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case '89504e47':\n            isValid = true;\n            break;\n          case 'ffd8ffe0':\n          case 'ffd8ffe1':\n          case 'ffd8ffe2':\n          case 'ffd8ffe3':\n          case 'ffd8ffe8':\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
            },
            {
                "name": "mimeType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/posts/post-create/mime-type.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof(control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = Observable.create(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener(\"loadend\", () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = \"\";\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case \"89504e47\":\n            isValid = true;\n            break;\n          case \"ffd8ffe0\":\n          case \"ffd8ffe1\":\n          case \"ffd8ffe2\":\n          case \"ffd8ffe3\":\n          case \"ffd8ffe8\":\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "bootstrap",
                "file": "nestbackend/src/main.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "nestbackend/src/bills/entities/bill.model.ts": [
                {
                    "name": "BillSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "nestbackend/src/bills/entities/bill.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new mongoose.Schema({\n  title: { type: String, required: true },\n  amount: { type: Number, required: true },\n  description: { type: String, required: true },\n  institution: { type: String },\n  category: { type: String },\n  frequency: { type: String },\n  dueDate: { type: Date, default: Date.now },\n  paymentMethod: { type: String },\n  imagePath: { type: String, required: true },\n})"
                }
            ],
            "nestbackend/src/budgets/entities/budget.model.ts": [
                {
                    "name": "BudgetSchema",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "nestbackend/src/budgets/entities/budget.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new mongoose.Schema({\n  budgetItem: { type: String, required: true },\n  budgetCategory: { type: String },\n  percentage: { type: Number, required: true },\n  percentageCategory: { type: Number, required: true },\n  exemptFromRecalculation: { type: Boolean, required: true },\n  fixedPriceValue: { type: Number },\n  contribution: { type: Number, required: true },\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/accounts/account-create/mime-type.validator.ts": [
                {
                    "name": "mimeType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/accounts/account-create/mime-type.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof (control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = new Observable(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener('loadend', () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = '';\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case '89504e47':\n            isValid = true;\n            break;\n          case 'ffd8ffe0':\n          case 'ffd8ffe1':\n          case 'ffd8ffe2':\n          case 'ffd8ffe3':\n          case 'ffd8ffe8':\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
                }
            ],
            "src/app/budget/budget-create/mime-type.validator.ts": [
                {
                    "name": "mimeType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/budget/budget-create/mime-type.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof control.value === \"string\") {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = new Observable((observer: Observer<{ [key: string]: any }>) => {\n    fileReader.addEventListener(\"loadend\", () => {\n      const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(\n        0,\n        4\n      );\n      let header = \"\";\n      let isValid = false;\n      for (let i = 0; i < arr.length; i++) {\n        header += arr[i].toString(16);\n      }\n      switch (header) {\n        case \"89504e47\":\n          isValid = true;\n          break;\n        case \"ffd8ffe0\":\n        case \"ffd8ffe1\":\n        case \"ffd8ffe2\":\n        case \"ffd8ffe3\":\n        case \"ffd8ffe8\":\n          isValid = true;\n          break;\n        default:\n          isValid = false; // Or you can use the blob.type as fallback\n          break;\n      }\n      if (isValid) {\n        observer.next(null);\n      } else {\n        observer.next({ invalidMimeType: true });\n      }\n      observer.complete();\n    });\n    fileReader.readAsArrayBuffer(file);\n  });\n  return frObs;\n}"
                }
            ],
            "src/app/bills/bill-create/mime-type.validator.ts": [
                {
                    "name": "mimeType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/bills/bill-create/mime-type.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof (control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = new Observable(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener('loadend', () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = '';\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case '89504e47':\n            isValid = true;\n            break;\n          case 'ffd8ffe0':\n          case 'ffd8ffe1':\n          case 'ffd8ffe2':\n          case 'ffd8ffe3':\n          case 'ffd8ffe8':\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
                }
            ],
            "src/app/card/card-create/mime-type.validator.ts": [
                {
                    "name": "mimeType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/card/card-create/mime-type.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof (control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = new Observable(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener('loadend', () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = '';\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case '89504e47':\n            isValid = true;\n            break;\n          case 'ffd8ffe0':\n          case 'ffd8ffe1':\n          case 'ffd8ffe2':\n          case 'ffd8ffe3':\n          case 'ffd8ffe8':\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
                }
            ],
            "src/app/institution/account-create/mime-type.validator.ts": [
                {
                    "name": "mimeType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/institution/account-create/mime-type.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof (control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = new Observable(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener('loadend', () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = '';\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case '89504e47':\n            isValid = true;\n            break;\n          case 'ffd8ffe0':\n          case 'ffd8ffe1':\n          case 'ffd8ffe2':\n          case 'ffd8ffe3':\n          case 'ffd8ffe8':\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
                }
            ],
            "src/app/posts/post-create/mime-type.validator.ts": [
                {
                    "name": "mimeType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/posts/post-create/mime-type.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof(control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = Observable.create(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener(\"loadend\", () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = \"\";\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case \"89504e47\":\n            isValid = true;\n            break;\n          case \"ffd8ffe0\":\n          case \"ffd8ffe1\":\n          case \"ffd8ffe2\":\n          case \"ffd8ffe3\":\n          case \"ffd8ffe8\":\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n}"
                }
            ]
        },
        "groupedFunctions": {
            "nestbackend/src/main.ts": [
                {
                    "name": "bootstrap",
                    "file": "nestbackend/src/main.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "PostListComponent"
                    },
                    {
                        "path": "create",
                        "component": "PostCreateComponent"
                    },
                    {
                        "path": "edit/:postId",
                        "component": "PostCreateComponent"
                    },
                    {
                        "path": "card",
                        "component": "CardListComponent"
                    },
                    {
                        "path": "card/create",
                        "component": "CardCreateComponent"
                    },
                    {
                        "path": "card/edit/:cardId",
                        "component": "CardCreateComponent"
                    },
                    {
                        "path": "bill",
                        "component": "BillListComponent"
                    },
                    {
                        "path": "bill/create",
                        "component": "BillCreateComponent"
                    },
                    {
                        "path": "bill/edit/:billId",
                        "component": "BillCreateComponent"
                    },
                    {
                        "path": "account",
                        "component": "AccountListComponent"
                    },
                    {
                        "path": "account/create",
                        "component": "AccountCreateComponent"
                    },
                    {
                        "path": "account/edit/:accountId",
                        "component": "AccountCreateComponent"
                    },
                    {
                        "path": "budgets",
                        "component": "BudgetListComponent"
                    },
                    {
                        "path": "budgets/create",
                        "component": "BudgetCreateComponent"
                    },
                    {
                        "path": "budgets/edit/:budgetId",
                        "component": "BudgetCreateComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/accounts/accounts.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "AccountsController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/accounts/accounts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/accounts/dto/create-account.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateAccountDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/accounts/dto/update-account.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateAccountDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/accounts/entities/account.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Account",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/app.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "AppController",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/assets/assets.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "AssetsController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/assets/assets.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AssetsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/assets/dto/create-asset.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateAssetDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/assets/dto/update-asset.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateAssetDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/assets/entities/asset.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Asset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/bills/bills.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "BillsController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/bills/bills.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BillsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/bills/dto/create-bill.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateBillDto",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/bills/dto/update-bill.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateBillDto",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/bills/entities/bill.entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BillInterface",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/bills/entities/bill.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BillSchema",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/budgets/budgets.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "BudgetsController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/budgets/budgets.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BudgetsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/budgets/dto/create-budget.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateBudgetDto",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/budgets/dto/update-budget.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateBudgetDto",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/budgets/entities/budget.entity.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BudgetInterface",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/budgets/entities/budget.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BudgetSchema",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/cards/cards.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "CardsController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/cards/cards.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/cards/dto/create-card.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateCardDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/cards/dto/update-card.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateCardDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/cards/entities/card.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/charts/charts.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "ChartsController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/charts/charts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/charts/dto/create-chart.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateChartDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/charts/dto/update-chart.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateChartDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/charts/entities/chart.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Chart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/incomes/dto/create-income.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateIncomeDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/incomes/dto/update-income.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateIncomeDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/incomes/entities/income.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Income",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/incomes/incomes.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "IncomesController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/incomes/incomes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IncomesService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/institutions/dto/create-institution.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateInstitutionDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/institutions/dto/update-institution.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateInstitutionDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/institutions/entities/institution.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Institution",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/institutions/institutions.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "InstitutionsController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/institutions/institutions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InstitutionsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/investments/dto/create-investment.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateInvestmentDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/investments/dto/update-investment.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateInvestmentDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/investments/entities/investment.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Investment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/investments/investments.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "InvestmentsController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/investments/investments.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InvestmentsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/liabilities/dto/create-liability.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateLiabilityDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/liabilities/dto/update-liability.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateLiabilityDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/liabilities/entities/liability.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Liability",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/liabilities/liabilities.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "LiabilitiesController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/liabilities/liabilities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LiabilitiesService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/loans/dto/create-loan.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateLoanDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/loans/dto/update-loan.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateLoanDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/loans/entities/loan.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Loan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/loans/loans.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "LoansController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/loans/loans.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoansService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/main.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/products/products.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "ProductsController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/products/products.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/products/products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/wishes/dto/create-wish.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateWishDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/wishes/dto/update-wish.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateWishDto",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/wishes/entities/wish.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Wish",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/wishes/wishes.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "WishesController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "nestbackend/src/wishes/wishes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WishesService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/accounts/account-create/account-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/accounts/account-create/mime-type.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mimeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/accounts/account-list/account-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/accounts/account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/accounts/account.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Account",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/accounts/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/bills/bill-create/bill-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BillCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/bills/bill-create/mime-type.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mimeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/bills/bill-list/bill-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BillListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/bills/bill.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BillComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/bills/bill.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Bill",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/bills/bill.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BillsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/budget/budget-create/budget-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BudgetCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/budget/budget-create/mime-type.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mimeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/budget/budget-list/budget-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BudgetListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/budget/budget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BudgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/budget/budget.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Budget",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/budget/budget.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BudgetsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card-create/card-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card-create/mime-type.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mimeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card-inputs/card-inputs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardInputsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card-list/card-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card-repayment/card-repayment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardRepaymentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/charts/bar-chart/bar-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BarChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/charts/bubble-chart/bubble-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BubbleChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/charts/doughnut-chart/doughnut-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DoughnutChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/charts/line-chart/line-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LineChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/charts/pie-chart/pie-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PieChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/charts/radar-chart/radar-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadarChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/income/income-create/income-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IncomeCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/income/income-list/income-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IncomeListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/income/income.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IncomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/income/income.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Income",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/income/income.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IncomeService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/institution/account-create/account-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/institution/account-create/mime-type.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mimeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/institution/account-list/account-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/institution/account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/institution/account.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Account",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/institution/account.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccountsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/investment/investment-create/investment-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvestmentCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/investment/investment-list/investment-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvestmentListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/investment/investment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InvestmentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/investment/investment.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Investment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/investment/investment.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InvestmentService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/liability/liability-create/liability-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiabilityCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/liability/liability-list/liability-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiabilityListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/liability/liability.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LiabilityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/liability/liability.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Liability",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/liability/liability.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LiabilityService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/loan/loan-create/loan-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoanCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/loan/loan-list/loan-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoanListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/loan/loan.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/loan/loan.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Loan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/loan/loan.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoanService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/post-create/mime-type.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mimeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/post-create/post-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/post-list/post-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/post.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Post",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/posts/posts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/wish/wish-create/wish-create.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WishCreateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/wish/wish-list/wish-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WishListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/wish/wish.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WishComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/wish/wish.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Wish",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/wish/wish.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WishService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}